neuron# 4 firparams =  [  1.13050347e+02   9.25333596e+01   1.93802527e-01   5.09807955e-20] qprob =  0.983720667895
neuron# 5 firparams =  [  8.91444397e+01   8.01229365e+01   3.71423535e-01   9.63040086e-20] qprob =  0.999998917418
neuron# 6 firparams =  [  1.22069765e+02   7.91770833e+01   1.97712265e-01   2.49839361e-19] qprob =  0.999998001384
This is pdfTeX, Version 3.14159265-2.6-1.40.16 (TeX Live 2015/Debian) (preloaded format=pdflatex)
 restricted \write18 enabled.
entering extended mode
(./p0g0_m75.tex
LaTeX2e <2016/02/01>
Babel <3.9q> and hyphenation patterns for 3 language(s) loaded.
(/usr/share/texlive/texmf-dist/tex/latex/base/article.cls
Document Class: article 2014/09/29 v1.4h Standard LaTeX document class
(/usr/share/texlive/texmf-dist/tex/latex/base/size10.clo))
(/usr/share/texlive/texmf-dist/tex/latex/base/fontenc.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/t1enc.def))
(/usr/share/texlive/texmf-dist/tex/latex/base/inputenc.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/utf8.def
(/usr/share/texlive/texmf-dist/tex/latex/base/t1enc.dfu)
(/usr/share/texlive/texmf-dist/tex/latex/base/ot1enc.dfu)
(/usr/share/texlive/texmf-dist/tex/latex/base/omsenc.dfu)))
(/usr/share/texmf/tex/latex/lm/lmodern.sty)
(/usr/share/texlive/texmf-dist/tex/latex/base/fontenc.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/t1enc.def))
(/usr/share/texlive/texmf-dist/tex/latex/base/fontenc.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/t1enc.def))
(/usr/share/texlive/texmf-dist/tex/latex/base/fontenc.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/t1enc.def))
(/usr/share/texlive/texmf-dist/tex/latex/base/fontenc.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/t1enc.def))
(/usr/share/texlive/texmf-dist/tex/latex/base/fontenc.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/t1enc.def))
(/usr/share/texlive/texmf-dist/tex/latex/base/fontenc.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/t1enc.def))
(/usr/share/texlive/texmf-dist/tex/latex/base/fontenc.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/t1enc.def))
(/usr/share/texlive/texmf-dist/tex/latex/base/fontenc.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/t1enc.def))
(/usr/share/texlive/texmf-dist/tex/latex/base/fontenc.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/t1enc.def))
(/usr/share/texlive/texmf-dist/tex/latex/base/fontenc.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/t1enc.def))
(/usr/share/texlive/texmf-dist/tex/latex/base/fontenc.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/t1enc.def))
(/usr/share/texlive/texmf-dist/tex/latex/base/fontenc.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/t1enc.def))
(/usr/share/texlive/texmf-dist/tex/latex/base/fontenc.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/t1enc.def))
(/usr/share/texlive/texmf-dist/tex/latex/base/fontenc.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/t1enc.def))
(/usr/share/texlive/texmf-dist/tex/latex/base/fontenc.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/t1enc.def))
(/usr/share/texlive/texmf-dist/tex/latex/base/fontenc.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/t1enc.def))
(/usr/share/texlive/texmf-dist/tex/latex/base/fontenc.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/t1enc.def))
(/usr/share/texlive/texmf-dist/tex/latex/base/fontenc.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/t1enc.def))
(/usr/share/texlive/texmf-dist/tex/latex/base/fontenc.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/t1enc.def))
(/usr/share/texlive/texmf-dist/tex/latex/base/fontenc.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/t1enc.def))
(/usr/share/texlive/texmf-dist/tex/latex/base/fontenc.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/t1enc.def))
(/usr/share/texlive/texmf-dist/tex/latex/base/fontenc.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/t1enc.def))
(/usr/share/texlive/texmf-dist/tex/latex/base/fontenc.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/t1enc.def))
(/usr/share/texlive/texmf-dist/tex/latex/base/fontenc.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/t1enc.def))
(/usr/share/texlive/texmf-dist/tex/latex/base/fontenc.sty
(/usr/share/texlive/texmf-dist/tex/latex/base/t1enc.def))
(/usr/share/texlive/texmf-dist/tex/latex/geometry/geometry.sty
(/usr/share/texlive/texmf-dist/tex/latex/graphics/keyval.sty)
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/ifpdf.sty)
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/ifvtex.sty)
(/usr/share/texlive/texmf-dist/tex/generic/ifxetex/ifxetex.sty))
(/usr/share/texlive/texmf-dist/tex/latex/graphics/graphicx.sty
(/usr/share/texlive/texmf-dist/tex/latex/graphics/graphics.sty
(/usr/share/texlive/texmf-dist/tex/latex/graphics/trig.sty)
(/usr/share/texlive/texmf-dist/tex/latex/latexconfig/graphics.cfg)
(/usr/share/texlive/texmf-dist/tex/latex/pdftex-def/pdftex.def
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/infwarerr.sty)
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/ltxcmds.sty))))
(/usr/share/texlive/texmf-dist/tex/latex/caption/subcaption.sty
(/usr/share/texlive/texmf-dist/tex/latex/caption/caption.sty
(/usr/share/texlive/texmf-dist/tex/latex/caption/caption3.sty)))
No file p0g0_m75.aux.
(/usr/share/texmf/tex/latex/lm/t1lmr.fd)
*geometry* driver: auto-detecting
*geometry* detected driver: pdftex
(/usr/share/texlive/texmf-dist/tex/context/base/supp-pdf.mkii
[Loading MPS to PDF converter (version 2006.09.02).]
) (/usr/share/texlive/texmf-dist/tex/generic/oberdiek/pdftexcmds.sty
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/ifluatex.sty))
(/usr/share/texlive/texmf-dist/tex/latex/oberdiek/epstopdf-base.sty
(/usr/share/texlive/texmf-dist/tex/latex/oberdiek/grfext.sty
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/kvdefinekeys.sty))
(/usr/share/texlive/texmf-dist/tex/latex/oberdiek/kvoptions.sty
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/kvsetkeys.sty
(/usr/share/texlive/texmf-dist/tex/generic/oberdiek/etexcmds.sty)))
(/usr/share/texlive/texmf-dist/tex/latex/latexconfig/epstopdf-sys.cfg))
</tmp/pylatex/fc814103-a179-42a1-b1db-894644f4e203.pdf, id=1, 578.16pt x 433.62
pt> <use /tmp/pylatex/fc814103-a179-42a1-b1db-894644f4e203.pdf>
</tmp/pylatex/4ae19c87-32a6-4750-8fb1-220d06792ffb.pdf, id=2, 578.16pt x 433.62
pt> <use /tmp/pylatex/4ae19c87-32a6-4750-8fb1-220d06792ffb.pdf>
</tmp/pylatex/89dbce54-8d41-46a4-ba20-767659c386ae.pdf, id=3, 578.16pt x 433.62
pt> <use /tmp/pylatex/89dbce54-8d41-46a4-ba20-767659c386ae.pdf>
</tmp/pylatex/7978f414-9a50-4715-b11b-88b69808f17b.pdf, id=4, 578.16pt x 433.62
pt> <use /tmp/pylatex/7978f414-9a50-4715-b11b-88b69808f17b.pdf>
</tmp/pylatex/d00bed4a-763d-40d5-9f38-8aaf6eac68f5.pdf, id=5, 578.16pt x 433.62
pt> <use /tmp/pylatex/d00bed4a-763d-40d5-9f38-8aaf6eac68f5.pdf>
</tmp/pylatex/2257aeeb-7bc2-4385-aa28-e00622f6ea4a.pdf, id=6, 578.16pt x 433.62
pt> <use /tmp/pylatex/2257aeeb-7bc2-4385-aa28-e00622f6ea4a.pdf>
Underfull \hbox (badness 10000) in paragraph at lines 89--107
[][] [] []
! Output loop---100 consecutive dead cycles.
\end@float ...loatpenalty <-\@Mii \penalty -\@Miv 
                                                  \@tempdima \prevdepth \vbo...
l.457 \end{figure}
                  
[1 </tmp/pylatex/fc814103-a179-42a1-b1db-894644f4e203.pdf> </tmp/pylatex/4ae19c
87-32a6-4750-8fb1-220d06792ffb.pdf

pdfTeX warning: pdflatex (file /tmp/pylatex/4ae19c87-32a6-4750-8fb1-220d06792ff
b.pdf): PDF inclusion: multiple pdfs with page group included in a single page
> </tmp/pylatex/89dbce54-8d41-46a4-ba20-767659c386ae.pdf

pdfTeX warning: pdflatex (file /tmp/pylatex/89dbce54-8d41-46a4-ba20-767659c386a
e.pdf): PDF inclusion: multiple pdfs with page group included in a single page
> </tmp/pylatex/7978f414-9a50-4715-b11b-88b69808f17b.pdf

pdfTeX warning: pdflatex (file /tmp/pylatex/7978f414-9a50-4715-b11b-88b69808f17
b.pdf): PDF inclusion: multiple pdfs with page group included in a single page
> </tmp/pylatex/d00bed4a-763d-40d5-9f38-8aaf6eac68f5.pdf

pdfTeX warning: pdflatex (file /tmp/pylatex/d00bed4a-763d-40d5-9f38-8aaf6eac68f
5.pdf): PDF inclusion: multiple pdfs with page group included in a single page
> </tmp/pylatex/2257aeeb-7bc2-4385-aa28-e00622f6ea4a.pdf

pdfTeX warning: pdflatex (file /tmp/pylatex/2257aeeb-7bc2-4385-aa28-e00622f6ea4
a.pdf): PDF inclusion: multiple pdfs with page group included in a single page
>]

! LaTeX Error: Too many unprocessed floats.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.469 \begin{figure}[htbp]
                          
! Undefined control sequence.
\caption@ORI@xfloat ... \global \setbox \@currbox 
                                                  \color@vbox \normalcolor \...
l.469 \begin{figure}[htbp]
                          
! Missing number, treated as zero.
<to be read again> 
                   \color@vbox 
l.469 \begin{figure}[htbp]
                          
! Undefined control sequence.
\@largefloatcheck ->\ifdim \ht \@currbox 
                                         >\textheight \@tempdima -\textheigh...
l.471 \end{figure}
                  
! Missing number, treated as zero.
<to be read again> 
                   >
l.471 \end{figure}
                  
! Undefined control sequence.
<argument> \@currbox 
                     
l.471 \end{figure}
                  
! Argument of \@xnext has an extra }.
<inserted text> 
                \par 
l.471 \end{figure}
                  
Runaway argument?
\@currbox \@currlist \ifnum \count \@currbox >\z@ \advance \@pageht \@pagedp \E
TC.
! Paragraph ended before \@xnext was complete.
<to be read again> 
                   \par 
l.471 \end{figure}
                  
! Extra \else.
\end@float ...pdima \penalty \@floatpenalty \else 
                                                  \vadjust {\penalty -\@Miv ...
l.471 \end{figure}
                  
! You can't use `\vadjust' in vertical mode.
\end@float ...nalty \@floatpenalty \else \vadjust 
                                                  {\penalty -\@Miv \vbox {}\...
l.471 \end{figure}
                  
! Argument of \@xnext has an extra }.
<inserted text> 
                \par 
l.471 \end{figure}
                  
Runaway argument?
\@currbox \@currlist \ifnum \count \@currbox >\z@ \advance \@pageht \@pagedp \E
TC.
! Paragraph ended before \@xnext was complete.
<to be read again> 
                   \par 
l.471 \end{figure}
                  

! LaTeX Error: Too many unprocessed floats.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.476 \begin{figure}[htbp]
                          
! Undefined control sequence.
\caption@ORI@xfloat ... \global \setbox \@currbox 
                                                  \color@vbox \normalcolor \...
l.476 \begin{figure}[htbp]
                          
! Missing number, treated as zero.
<to be read again> 
                   \color@vbox 
l.476 \begin{figure}[htbp]
                          
! Undefined control sequence.
\@largefloatcheck ->\ifdim \ht \@currbox 
                                         >\textheight \@tempdima -\textheigh...
l.478 \end{figure}
                  
! Missing number, treated as zero.
<to be read again> 
                   >
l.478 \end{figure}
                  
! Undefined control sequence.
<argument> \@currbox 
                     
l.478 \end{figure}
                  
! Missing number, treated as zero.
<to be read again> 
                   \@elt 
l.478 \end{figure}
                  
! Missing = inserted for \ifnum.
<to be read again> 
                   \@elt 
l.478 \end{figure}
                  
! Missing number, treated as zero.
<to be read again> 
                   \@elt 
l.478 \end{figure}
                  

! LaTeX Error: This may be a LaTeX bug.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.478 \end{figure}
                  
! Undefined control sequence.
\@addmarginpar ...advance \@tempdima \ht \@marbox 
                                                  \ifdim \@tempdima >\z@ \@l...
l.478 \end{figure}
                  
! Missing number, treated as zero.
<to be read again> 
                   \global 
l.478 \end{figure}
                  
! Illegal unit of measure (pt inserted).
<to be read again> 
                   \global 
l.478 \end{figure}
                  
! Undefined control sequence.
\@addmarginpar ...vance \@mparbottom \dp \@marbox 
                                                  \global \advance \@mparbot...
l.478 \end{figure}
                  
! Missing number, treated as zero.
<to be read again> 
                   \global 
l.478 \end{figure}
                  
! Undefined control sequence.
\@addmarginpar ...dvance \@tempdima -\ht \@marbox 
                                                  \global \setbox \@marbox \...
l.478 \end{figure}
                  
! Missing number, treated as zero.
<to be read again> 
                   \global 
l.478 \end{figure}
                  
! Undefined control sequence.
\@addmarginpar ...marbox \global \setbox \@marbox 
                                                  \vbox {\vskip \@tempdima \...
l.478 \end{figure}
                  
! Missing number, treated as zero.
<to be read again> 
                   \vbox 
l.478 \end{figure}
                  
! Undefined control sequence.
\@addmarginpar ...\vskip \@tempdima \box \@marbox 
                                                  }\global \ht \@marbox \z@ ...
l.478 \end{figure}
                  
! Missing number, treated as zero.
<to be read again> 
                   }
l.478 \end{figure}
                  
! Undefined control sequence.
\@addmarginpar ... \@marbox }\global \ht \@marbox 
                                                  \z@ \global \dp \@marbox \...
l.478 \end{figure}
                  
! Missing number, treated as zero.
<to be read again> 
                   \global 
l.478 \end{figure}
                  
! Illegal unit of measure (pt inserted).
<to be read again> 
                   \global 
l.478 \end{figure}
                  
! Undefined control sequence.
\@addmarginpar ...marbox \z@ \global \dp \@marbox 
                                                  \z@ \kern -\@pagedp \noint...
l.478 \end{figure}
                  
! Missing number, treated as zero.
<to be read again> 
                   \kern 
l.478 \end{figure}
                  
! Illegal unit of measure (pt inserted).
<to be read again> 
                   \kern 
l.478 \end{figure}
                  
! Undefined control sequence.
\@addmarginpar ...arginparwidth \fi \box \@marbox 
                                                  \hss }\nointerlineskip \hb...
l.478 \end{figure}
                  
! Missing number, treated as zero.
<to be read again> 
                   \hss 
l.478 \end{figure}
                  

! LaTeX Error: Too many unprocessed floats.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.483 \begin{figure}[htbp]
                          
! Undefined control sequence.
\caption@ORI@xfloat ... \global \setbox \@currbox 
                                                  \color@vbox \normalcolor \...
l.483 \begin{figure}[htbp]
                          
! Missing number, treated as zero.
<to be read again> 
                   \color@vbox 
l.483 \begin{figure}[htbp]
                          
! Undefined control sequence.
\@largefloatcheck ->\ifdim \ht \@currbox 
                                         >\textheight \@tempdima -\textheigh...
l.485 \end{figure}
                  
! Missing number, treated as zero.
<to be read again> 
                   >
l.485 \end{figure}
                  
! Undefined control sequence.
<argument> \@currbox 
                     
l.485 \end{figure}
                  
! Argument of \@xnext has an extra }.
<inserted text> 
                \par 
l.485 \end{figure}
                  
Runaway argument?
\@currbox \@currlist \ifnum \count \@currbox >\z@ \advance \@pageht \@pagedp \E
TC.
! Paragraph ended before \@xnext was complete.
<to be read again> 
                   \par 
l.485 \end{figure}
                  
! Extra \else.
\end@float ...pdima \penalty \@floatpenalty \else 
                                                  \vadjust {\penalty -\@Miv ...
l.485 \end{figure}
                  
! You can't use `\vadjust' in vertical mode.
\end@float ...nalty \@floatpenalty \else \vadjust 
                                                  {\penalty -\@Miv \vbox {}\...
l.485 \end{figure}
                  
! Argument of \@xnext has an extra }.
<inserted text> 
                \par 
l.485 \end{figure}
                  
Runaway argument?
\@currbox \@currlist \ifnum \count \@currbox >\z@ \advance \@pageht \@pagedp \E
TC.
! Paragraph ended before \@xnext was complete.
<to be read again> 
                   \par 
l.485 \end{figure}
                  

! LaTeX Error: Too many unprocessed floats.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.490 \begin{figure}[htbp]
                          
! Undefined control sequence.
\caption@ORI@xfloat ... \global \setbox \@currbox 
                                                  \color@vbox \normalcolor \...
l.490 \begin{figure}[htbp]
                          
! Missing number, treated as zero.
<to be read again> 
                   \color@vbox 
l.490 \begin{figure}[htbp]
                          
! Undefined control sequence.
\@largefloatcheck ->\ifdim \ht \@currbox 
                                         >\textheight \@tempdima -\textheigh...
l.492 \end{figure}
                  
! Missing number, treated as zero.
<to be read again> 
                   >
l.492 \end{figure}
                  
! Undefined control sequence.
<argument> \@currbox 
                     
l.492 \end{figure}
                  
! Missing number, treated as zero.
<to be read again> 
                   \@elt 
l.492 \end{figure}
                  
! Missing = inserted for \ifnum.
<to be read again> 
                   \@elt 
l.492 \end{figure}
                  
! Missing number, treated as zero.
<to be read again> 
                   \@elt 
l.492 \end{figure}
                  

! LaTeX Error: This may be a LaTeX bug.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.492 \end{figure}
                  
! Undefined control sequence.
\@addmarginpar ...advance \@tempdima \ht \@marbox 
                                                  \ifdim \@tempdima >\z@ \@l...
l.492 \end{figure}
                  
! Bad register code (-327680).
\@addmarginpar ...e \space moved}\else \@tempdima 
                                                  \z@ \fi \global \@mparbott...
l.492 \end{figure}
                  
! Missing number, treated as zero.
<to be read again> 
                   \global 
l.492 \end{figure}
                  
! Illegal unit of measure (pt inserted).
<to be read again> 
                   \global 
l.492 \end{figure}
                  
! Undefined control sequence.
\@addmarginpar ...vance \@mparbottom \dp \@marbox 
                                                  \global \advance \@mparbot...
l.492 \end{figure}
                  
! Missing number, treated as zero.
<to be read again> 
                   \global 
l.492 \end{figure}
                  
! Undefined control sequence.
\@addmarginpar ...dvance \@tempdima -\ht \@marbox 
                                                  \global \setbox \@marbox \...
l.492 \end{figure}
                  
! Missing number, treated as zero.
<to be read again> 
                   \global 
l.492 \end{figure}
                  
! Undefined control sequence.
\@addmarginpar ...marbox \global \setbox \@marbox 
                                                  \vbox {\vskip \@tempdima \...
l.492 \end{figure}
                  
! Missing number, treated as zero.
<to be read again> 
                   \vbox 
l.492 \end{figure}
                  
! Undefined control sequence.
\@addmarginpar ...\vskip \@tempdima \box \@marbox 
                                                  }\global \ht \@marbox \z@ ...
l.492 \end{figure}
                  
! Missing number, treated as zero.
<to be read again> 
                   }
l.492 \end{figure}
                  
! Undefined control sequence.
\@addmarginpar ... \@marbox }\global \ht \@marbox 
                                                  \z@ \global \dp \@marbox \...
l.492 \end{figure}
                  
! Missing number, treated as zero.
<to be read again> 
                   \global 
l.492 \end{figure}
                  
! Illegal unit of measure (pt inserted).
<to be read again> 
                   \global 
l.492 \end{figure}
                  
! Undefined control sequence.
\@addmarginpar ...marbox \z@ \global \dp \@marbox 
                                                  \z@ \kern -\@pagedp \noint...
l.492 \end{figure}
                  
! Missing number, treated as zero.
<to be read again> 
                   \kern 
l.492 \end{figure}
                  
! Illegal unit of measure (pt inserted).
<to be read again> 
                   \kern 
l.492 \end{figure}
                  
! Undefined control sequence.
\@addmarginpar ...arginparwidth \fi \box \@marbox 
                                                  \hss }\nointerlineskip \hb...
l.492 \end{figure}
                  
! Missing number, treated as zero.
<to be read again> 
                   \hss 
l.492 \end{figure}
                  

! LaTeX Error: Too many unprocessed floats.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.497 \begin{figure}[htbp]
                          
! Undefined control sequence.
\caption@ORI@xfloat ... \global \setbox \@currbox 
                                                  \color@vbox \normalcolor \...
l.497 \begin{figure}[htbp]
                          
! Missing number, treated as zero.
<to be read again> 
                   \color@vbox 
l.497 \begin{figure}[htbp]
                          
! Undefined control sequence.
\@largefloatcheck ->\ifdim \ht \@currbox 
                                         >\textheight \@tempdima -\textheigh...
l.499 \end{figure}
                  
! Missing number, treated as zero.
<to be read again> 
                   >
l.499 \end{figure}
                  
! Undefined control sequence.
<argument> \@currbox 
                     
l.499 \end{figure}
                  
! Argument of \@xnext has an extra }.
<inserted text> 
                \par 
l.499 \end{figure}
                  
Runaway argument?
\@currbox \@currlist \ifnum \count \@currbox >\z@ \advance \@pageht \@pagedp \E
TC.
! Paragraph ended before \@xnext was complete.
<to be read again> 
                   \par 
l.499 \end{figure}
                  
! Extra \else.
\end@float ...pdima \penalty \@floatpenalty \else 
                                                  \vadjust {\penalty -\@Miv ...
l.499 \end{figure}
                  
! You can't use `\vadjust' in vertical mode.
\end@float ...nalty \@floatpenalty \else \vadjust 
                                                  {\penalty -\@Miv \vbox {}\...
l.499 \end{figure}
                  
! Argument of \@xnext has an extra }.
<inserted text> 
                \par 
l.499 \end{figure}
                  
Runaway argument?
\@currbox \@currlist \ifnum \count \@currbox >\z@ \advance \@pageht \@pagedp \E
TC.
! Paragraph ended before \@xnext was complete.
<to be read again> 
                   \par 
l.499 \end{figure}
                  

! LaTeX Error: Too many unprocessed floats.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.504 \begin{figure}[htbp]
                          
! Undefined control sequence.
\caption@ORI@xfloat ... \global \setbox \@currbox 
                                                  \color@vbox \normalcolor \...
l.504 \begin{figure}[htbp]
                          
! Missing number, treated as zero.
<to be read again> 
                   \color@vbox 
l.504 \begin{figure}[htbp]
                          
! Undefined control sequence.
\@largefloatcheck ->\ifdim \ht \@currbox 
                                         >\textheight \@tempdima -\textheigh...
l.506 \end{figure}
                  
(That makes 100 errors; please try again.)
!  ==> Fatal error occurred, no output PDF file produced!
Transcript written on p0g0_m75.log.

---------------------------------------------------------------------------
CalledProcessError                        Traceback (most recent call last)
<ipython-input-221-5fca6b397beb> in <module>()
----> 1 fg.GetSinglePeakNeurons(0, 0, .075, .075, 36, 'E', 6, './figs/twopop/p0g0_m75', IF_PLOT=1, IF_FIT = 1, trNo=11, T = 10000, IF_GE
N_RAND_NEURONS=1)                                                                                                                      

/homecentral/srao/Documents/code/binary/c/analysis/figs/twopop/FitGaussian.pyc in GetSinglePeakNeurons(p, gamma, mExt, mExtOne, nPhis, n
euronType, nNeurons, fname, trNo, nChnks, T, NE, NI, K, nPop, IF_FIT, IF_PLOT, IF_VERBOSE, IF_GEN_RAND_NEURONS)                        

/usr/local/lib/python2.7/dist-packages/pylatex/document.pyc in generate_pdf(self, filepath, **_3to2kwargs)
    191                 # For all other errors print the output and raise the error
    192                 print(e.output.decode())
--> 193                 raise(e)
    194             else:
    195                 if not silent:

CalledProcessError: Command '[u'pdflatex', u'--interaction=nonstopmode', u'p0g0_m75.tex']' returned non-zero exit status 1

In [222]: reload(fg)
---------------------------------------------------------------------------
ImportError                               Traceback (most recent call last)
<ipython-input-222-b467642ea4f1> in <module>()
----> 1 reload(fg)

ImportError: No module named FitGaussian

In [223]: cd ../../
/homecentral/srao/Documents/code/binary/c/analysis

In [224]: reload(fg)
/homecentral/srao/Documents/code/mypybox
Out[224]: <module 'FitGaussian' from 'FitGaussian.py'>

In [225]: fg.GetSinglePeakNeurons(0, 0, .075, .075, 36, 'E', 6, './figs/twopop/p0g0_m75', IF_PLOT=1, IF_FIT = 1, trNo=11, T = 10000, IF_
GEN_RAND_NEURONS=1)                                                                                                                    
\/\/\/\/\/\/\/\/\/\/
fitting params ...
\/\/\/\/\/\/\/\/\/\/
printing pdf...
nPasges =  3334
neuron# 1 firparams =  [  9.61290219e+01   3.92816976e+01   7.13651886e-02   3.93246264e-04] qprob =  0.99999999858
neuron# 2 firparams =  [  7.34192716e+01   4.60303361e+01   9.27576861e-02   1.14176497e-02] qprob =  0.994613856618
neuron# 3 firparams =  [  1.40016286e+02   4.62126906e+01   1.76935361e-01   1.27285692e-02] qprob =  0.999843572391
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
<ipython-input-225-5fca6b397beb> in <module>()
----> 1 fg.GetSinglePeakNeurons(0, 0, .075, .075, 36, 'E', 6, './figs/twopop/p0g0_m75', IF_PLOT=1, IF_FIT = 1, trNo=11, T = 10000, IF_GE
N_RAND_NEURONS=1)                                                                                                                      

/homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py in GetSinglePeakNeurons(p, gamma, mExt, mExtOne, nPhis, neuronType, nN
eurons, fname, trNo, nChnks, T, NE, NI, K, nPop, IF_FIT, IF_PLOT, IF_VERBOSE, IF_GEN_RAND_NEURONS)                                     
    435                     IS_SINGLE_PEAK = False
    436                     if IF_FIT:
--> 437                         fitParams, _, chiSquare, IS_SINGLE_PEAK, IS_RESPONSIVE = FitPeriodicGaussian(phis, yy, yysem, IF_PLOT_FI
T = IF_PLOT, MIN_PEAK_RATE = 0.)                                                                                                       
    438                     if IF_VERBOSE:
    439                         print 'neuron#', i, 'firparams = ', fitParams, 'qprob = ', GammaQ(nPhis - 4, chiSquare)

/homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py in FitPeriodicGaussian(x, y, ySEM, p0, IF_PLOT_FIT, MIN_PEAK_RATE)
    136             theta = np.linspace(0, np.pi, 100)
    137             bnds = ((-np.inf, -np.inf, 0, 0), (np.inf, np.inf, np.inf, 1))
--> 138             fitParams, fitError = curve_fit(PeriodicGaussian, x, y, p0 = p0, max_nfev = 4000, bounds = bnds)
    139             fitY = PeriodicGaussian(x, *fitParams)
    140             vidx = ySEM > 0

/usr/lib/python2.7/dist-packages/scipy/optimize/minpack.pyc in curve_fit(f, xdata, ydata, p0, sigma, absolute_sigma, check_finite, bound
s, method, **kwargs)                                                                                                                   
    656     else:
    657         res = least_squares(func, p0, args=args, bounds=bounds, method=method,
--> 658                             **kwargs)
    659 
    660         if not res.success:

/usr/lib/python2.7/dist-packages/scipy/optimize/_lsq/least_squares.pyc in least_squares(fun, x0, jac, bounds, method, ftol, xtol, gtol, 
x_scale, loss, f_scale, diff_step, tr_solver, tr_options, jac_sparsity, max_nfev, verbose, args, kwargs)                               
    876         result = trf(fun_wrapped, jac_wrapped, x0, f0, J0, lb, ub, ftol, xtol,
    877                      gtol, max_nfev, x_scale, loss_function, tr_solver,
--> 878                      tr_options.copy(), verbose)
    879 
    880     elif method == 'dogbox':

/usr/lib/python2.7/dist-packages/scipy/optimize/_lsq/trf.pyc in trf(fun, jac, x0, f0, J0, lb, ub, ftol, xtol, gtol, max_nfev, x_scale, l
oss_function, tr_solver, tr_options, verbose)                                                                                          
    124         return trf_bounds(
    125             fun, jac, x0, f0, J0, lb, ub, ftol, xtol, gtol, max_nfev, x_scale,
--> 126             loss_function, tr_solver, tr_options, verbose)
    127 
    128 

/usr/lib/python2.7/dist-packages/scipy/optimize/_lsq/trf.pyc in trf_bounds(fun, jac, x0, f0, J0, lb, ub, ftol, xtol, gtol, max_nfev, x_s
cale, loss_function, tr_solver, tr_options, verbose)                                                                                   
    378             cost = cost_new
    379 
--> 380             J = jac(x, f)
    381             njev += 1
    382 

/usr/lib/python2.7/dist-packages/scipy/optimize/_lsq/least_squares.pyc in jac_wrapped(x, f)
    834                 J = approx_derivative(fun, x, rel_step=diff_step, method=jac,
    835                                       f0=f, bounds=bounds, args=args,
--> 836                                       kwargs=kwargs, sparsity=jac_sparsity)
    837                 if J.ndim != 2:  # J is guaranteed not sparse.
    838                     J = np.atleast_2d(J)

/usr/lib/python2.7/dist-packages/scipy/optimize/_numdiff.pyc in approx_derivative(fun, x0, method, rel_step, f0, args, kwargs, bounds, s
parsity)                                                                                                                               
    347 
    348     if sparsity is None:
--> 349         return _dense_difference(fun_wrapped, x0, f0, h, use_one_sided, method)
    350     else:
    351         structure, groups = sparsity

/usr/lib/python2.7/dist-packages/scipy/optimize/_numdiff.pyc in _dense_difference(fun, x0, f0, h, use_one_sided, method)
    369             x = x0 + h_vecs[i]
    370             dx = x[i] - x0[i]  # Recompute dx as exactly representable number.
--> 371             df = fun(x) - f0
    372         elif method == '3-point' and use_one_sided[i]:
    373             x1 = x0 + h_vecs[i]

/usr/lib/python2.7/dist-packages/scipy/optimize/_numdiff.pyc in fun_wrapped(x)
    319 
    320     def fun_wrapped(x):
--> 321         f = np.atleast_1d(fun(x, *args, **kwargs))
    322         if f.ndim > 1:
    323             raise RuntimeError(("`fun` return value has "

/usr/lib/python2.7/dist-packages/scipy/optimize/minpack.pyc in _general_function(params, xdata, ydata, function)
    451 
    452 def _general_function(params, xdata, ydata, function):
--> 453     return function(xdata, *params) - ydata
    454 
    455 

/homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py in PeriodicGaussian(theta, po, sigma, a, offset)
     82     sigma = AngleInRange(sigma)
     83     for n in np.arange(-10, 10):
---> 84         out += a * np.exp(-(theta - po + 180.0 * n)**2 / (sigma**2)) + offset
     85     return out
     86 

KeyboardInterrupt: 

In [226]: reload(fg)
/homecentral/srao/Documents/code/mypybox
Out[226]: <module 'FitGaussian' from 'FitGaussian.py'>

In [227]: fg.GetSinglePeakNeurons(0, 0, .075, .075, 36, 'E', 6, './figs/twopop/p0g0_m75', IF_PLOT=1, IF_FIT = 1, trNo=11, T = 10000, IF_
GEN_RAND_NEURONS=1)                                                                                                                    
\/\/\/\/\/\/\/\/\/\/
fitting params ...
\/\/\/\/\/\/\/\/\/\/
printing pdf...
nPasges =  1
neuron# 1 firparams =  [  9.61290629e+01   3.92818981e+01   7.13652269e-02   3.93238474e-04] qprob =  0.99999999858
neuron# 2 firparams =  [  7.34192747e+01   4.60303525e+01   9.27576980e-02   1.14176487e-02] qprob =  0.994613860219
neuron# 3 firparams =  [  1.40016369e+02   4.62123310e+01   1.76934839e-01   1.27286124e-02] qprob =  0.999843559216
neuron# 4 firparams =  [  1.13050347e+02   9.25333594e+01   1.93802527e-01   6.65053212e-22] qprob =  0.983720667138
neuron# 5 firparams =  [  8.91444397e+01   8.01229364e+01   3.71423535e-01   1.39173138e-20] qprob =  0.999998917418
neuron# 6 firparams =  [  1.22069764e+02   7.91770846e+01   1.97712262e-01   4.29880511e-21] qprob =  0.999998001383
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(451)GetSinglePeakNeurons()
    450         ipdb.set_trace()
--> 451         doc.generate_pdf(clean_tex=False)
    452 

ipdb> nP
nPages  nPhis   nPop    
ipdb> nPages
1
ipdb> n
--Return--
None
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(451)GetSinglePeakNeurons()
    450         ipdb.set_trace()
--> 451         doc.generate_pdf(clean_tex=False)
    452 

ipdb> n
--Call--
> /usr/lib/python2.7/dist-packages/IPython/core/displayhook.py(234)__call__()
    233 
--> 234     def __call__(self, result=None):
    235         """Printing with history cache management.

ipdb> c

In [228]: reload(fg)
/homecentral/srao/Documents/code/mypybox
Out[228]: <module 'FitGaussian' from 'FitGaussian.py'>

In [229]: reload(fg)
/homecentral/srao/Documents/code/mypybox
Out[229]: <module 'FitGaussian' from 'FitGaussian.py'>

In [230]: fg.GetSinglePeakNeurons(0, 0, .075, .075, 36, 'E', 6, './figs/twopop/p0g0_m75', IF_PLOT=1, IF_FIT = 1, trNo=11, T = 10000, IF_
GEN_RAND_NEURONS=1)                                                                                                                    
\/\/\/\/\/\/\/\/\/\/
fitting params ...
\/\/\/\/\/\/\/\/\/\/
printing pdf...
nPasges =  1
neuron# 1 firparams =  [  9.61290239e+01   3.92817037e+01   7.13651897e-02   3.93246026e-04] qprob =  0.99999999858
neuron# 2 firparams =  [  7.34192768e+01   4.60303253e+01   9.27576769e-02   1.14176504e-02] qprob =  0.994613856682
neuron# 3 firparams =  [  1.40016164e+02   4.62117450e+01   1.76933990e-01   1.27286828e-02] qprob =  0.99984355225
neuron# 4 firparams =  [  1.13050347e+02   9.25333596e+01   1.93802527e-01   1.82011498e-18] qprob =  0.983720667681
neuron# 5 firparams =  [  8.91444397e+01   8.01229365e+01   3.71423535e-01   1.26199228e-18] qprob =  0.999998917418
neuron# 6 firparams =  [  1.22069766e+02   7.91770838e+01   1.97712263e-01   5.27235327e-18] qprob =  0.999998001385

In [231]: reload(fg)
/homecentral/srao/Documents/code/mypybox
Out[231]: <module 'FitGaussian' from 'FitGaussian.py'>

In [232]: fg.GetSinglePeakNeurons(0, 0, .075, .075, 36, 'E', 6, './figs/twopop/p0g0_m75', IF_PLOT=1, IF_FIT = 1, trNo=11, T = 10000, IF_
GEN_RAND_NEURONS=1)                                                                                                                    
\/\/\/\/\/\/\/\/\/\/
fitting params ...
\/\/\/\/\/\/\/\/\/\/
printing pdf...
nPasges =  2
neuron# 0 firparams =  [  1.32709902e+02   1.99356286e+00   1.95021254e-01   3.16573482e-03] qprob =  0.99999936716
neuron# 1 firparams =  [  9.61291139e+01   3.92821866e+01   7.13652817e-02   3.93227276e-04] qprob =  0.99999999858
neuron# 2 firparams =  [  7.34192664e+01   4.60302919e+01   9.27576531e-02   1.14176525e-02] qprob =  0.994613847944
neuron# 3 firparams =  [  1.40016012e+02   4.62129690e+01   1.76935764e-01   1.27285358e-02] qprob =  0.999843591516
neuron# 4 firparams =  [  1.13050347e+02   9.25333594e+01   1.93802527e-01   8.51665159e-21] qprob =  0.983720667495
neuron# 5 firparams =  [  8.91444397e+01   8.01229363e+01   3.71423536e-01   6.49915807e-20] qprob =  0.999998917418
neuron# 6 firparams =  [  1.22069766e+02   7.91770806e+01   1.97712270e-01   3.27501293e-17] qprob =  0.999998001384
neuron# 7 firparams =  [  1.06763748e+02   1.74495891e+00   3.36730595e-01   1.66402088e-02] qprob =  0.99999608826
neuron# 8 firparams =  [  5.83045490e+01   1.85602044e+00   2.77534745e-01   3.93125060e-03] qprob =  0.00226024520307
neuron# 9 firparams =  [  1.54243026e+02   4.79373723e+01   1.76980856e-01   4.53073099e-03] qprob =  0.888283644212
neuron# 10 firparams =  [  4.03680344e+01   3.41319675e+01   1.45915746e-01   6.21131830e-03] qprob =  0.999985862497
neuron# 11 firparams =  [  1.15496917e+02   8.77399149e+01   1.75265889e-01   1.02787531e-21] qprob =  0.977129785252
neuron# 12 firparams =  [  1.25128457e+02   7.94183352e+01   1.93844826e-01   6.26672032e-21] qprob =  0.999982360462
neuron# 13 firparams =  [  6.96375467e+01   4.06393463e+01   1.22600404e-01   1.24666515e-02] qprob =  0.692275818932
neuron# 14 firparams =  [  3.69372016e+01   6.90307775e+01   1.39325264e-01   1.08593305e-21] qprob =  0.955439386579
neuron# 15 firparams =  [  1.51518302e+02   7.55467182e+01   1.82614491e-01   8.62141830e-16] qprob =  0.998515636553
neuron# 16 firparams =  [  7.62147683e+01   8.02327491e+01   2.82777006e-01   5.34266775e-21] qprob =  0.117134871263
neuron# 17 firparams =  [  1.07044481e+02   1.79043737e+00   4.27065706e-01   2.04462570e-03] qprob =  0.99999803592
neuron# 18 firparams =  [  9.56721077e+01   2.89511245e+01   5.03509803e-02   1.75981056e-03] qprob =  1.0
neuron# 19 firparams =  [  4.62518627e+01   3.01904236e+01   4.61772374e-02   2.95807048e-03] qprob =  0.999999997504
neuron# 20 firparams =  [  5.99796984e+01   5.14496699e+01   2.04851309e-01   2.74463141e-03] qprob =  0.999999969505
neuron# 21 firparams =  [  2.10390143e+01   2.83675020e+01   1.66144286e-01   6.18169601e-03] qprob =  0.999999999064
neuron# 22 firparams =  [  1.18517409e+02   6.90536083e+01   1.78862208e-01   1.02994132e-19] qprob =  0.972005362479
neuron# 23 firparams =  [  1.65227280e+02   4.99205285e+01   8.37682749e-02   2.65532278e-03] qprob =  0.994422773397
neuron# 24 firparams =  [  8.26981672e+01   1.45537551e+01   5.71263452e-02   6.96771232e-03] qprob =  0.930393790253

In [233]: reload(fg)
/homecentral/srao/Documents/code/mypybox
Out[233]: <module 'FitGaussian' from 'FitGaussian.py'>

In [234]: reload(fg)
/homecentral/srao/Documents/code/mypybox
Out[234]: <module 'FitGaussian' from 'FitGaussian.py'>

In [235]: fg.GetSinglePeakNeurons(0, 0, .075, .075, 36, 'E', 1, './figs/twopop/p0g0_m75', IF_PLOT=1, IF_FIT = 1, trNo=11, T = 10000, IF_
GEN_RAND_NEURONS=1)                                                                                                                    
\/\/\/\/\/\/\/\/\/\/
fitting params ...
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
<ipython-input-235-694278b74d5c> in <module>()
----> 1 fg.GetSinglePeakNeurons(0, 0, .075, .075, 36, 'E', 1, './figs/twopop/p0g0_m75', IF_PLOT=1, IF_FIT = 1, trNo=11, T = 10000, IF_GE
N_RAND_NEURONS=1)                                                                                                                      

/homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py in GetSinglePeakNeurons(p, gamma, mExt, mExtOne, nPhis, neuronType, nN
eurons, fname, trNo, nChnks, T, NE, NI, K, nPop, IF_FIT, IF_PLOT, IF_VERBOSE, IF_GEN_RAND_NEURONS)                                     
    400         IS_SINGLE_PEAK = False
    401         if IF_FIT:
--> 402             fitParams, _, chiSquare, IS_SINGLE_PEAK, IS_RESPONSIVE = FitPeriodicGaussian(phis, yy, yysem, IF_PLOT_FIT = IF_PLOTM
IN_PEAK_RATE = 0.)                                                                                                                     
    403             fity = PeriodicGaussian(np.linspace(0, 180, nPhis, endpoint = False), *fitParams)
    404             fitMax = np.max(PeriodicGaussian(np.linspace(0, 180, 100, endpoint = 0), *fitParams))

/homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py in FitPeriodicGaussian(x, y, ySEM, p0, IF_PLOT_FIT, MIN_PEAK_RATE)
    159                     p0 = [x[np.argmax(y)], 50 + 20 * np.random.randn(), np.nanmax(y) + np.random.rand(), 1.0]
    160                     # print 'p0 = ', p0
--> 161                     fitParamsTmp, fitErrorTmp = curve_fit(PeriodicGaussian, x, y, p0 = p0, max_nfev = 4000, bounds = bnds)
    162 
    163                     # print '     ', fitParamsTmp

/usr/lib/python2.7/dist-packages/scipy/optimize/minpack.pyc in curve_fit(f, xdata, ydata, p0, sigma, absolute_sigma, check_finite, bound
s, method, **kwargs)                                                                                                                   
    656     else:
    657         res = least_squares(func, p0, args=args, bounds=bounds, method=method,
--> 658                             **kwargs)
    659 
    660         if not res.success:

/usr/lib/python2.7/dist-packages/scipy/optimize/_lsq/least_squares.pyc in least_squares(fun, x0, jac, bounds, method, ftol, xtol, gtol, 
x_scale, loss, f_scale, diff_step, tr_solver, tr_options, jac_sparsity, max_nfev, verbose, args, kwargs)                               
    876         result = trf(fun_wrapped, jac_wrapped, x0, f0, J0, lb, ub, ftol, xtol,
    877                      gtol, max_nfev, x_scale, loss_function, tr_solver,
--> 878                      tr_options.copy(), verbose)
    879 
    880     elif method == 'dogbox':

/usr/lib/python2.7/dist-packages/scipy/optimize/_lsq/trf.pyc in trf(fun, jac, x0, f0, J0, lb, ub, ftol, xtol, gtol, max_nfev, x_scale, l
oss_function, tr_solver, tr_options, verbose)                                                                                          
    124         return trf_bounds(
    125             fun, jac, x0, f0, J0, lb, ub, ftol, xtol, gtol, max_nfev, x_scale,
--> 126             loss_function, tr_solver, tr_options, verbose)
    127 
    128 

/usr/lib/python2.7/dist-packages/scipy/optimize/_lsq/trf.pyc in trf_bounds(fun, jac, x0, f0, J0, lb, ub, ftol, xtol, gtol, max_nfev, x_s
cale, loss_function, tr_solver, tr_options, verbose)                                                                                   
    337 
    338             x_new = make_strictly_feasible(x + step, lb, ub, rstep=0)
--> 339             f_new = fun(x_new)
    340             nfev += 1
    341 

/usr/lib/python2.7/dist-packages/scipy/optimize/_lsq/least_squares.pyc in fun_wrapped(x)
    762 
    763     def fun_wrapped(x):
--> 764         return np.atleast_1d(fun(x, *args, **kwargs))
    765 
    766     if method == 'trf':

/usr/lib/python2.7/dist-packages/scipy/optimize/minpack.pyc in _general_function(params, xdata, ydata, function)
    451 
    452 def _general_function(params, xdata, ydata, function):
--> 453     return function(xdata, *params) - ydata
    454 
    455 

/homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py in PeriodicGaussian(theta, po, sigma, a, offset)
     82     sigma = AngleInRange(sigma)
     83     for n in np.arange(-10, 10):
---> 84         out += a * np.exp(-(theta - po + 180.0 * n)**2 / (sigma**2)) + offset
     85     return out
     86 

KeyboardInterrupt: 

In [236]: reload(fg)
/homecentral/srao/Documents/code/mypybox
Out[236]: <module 'FitGaussian' from 'FitGaussian.py'>

In [237]: fg.GetSinglePeakNeurons(0, 0, .075, .075, 36, 'E', 1, './figs/twopop/p0g0_m75', IF_PLOT=1, IF_FIT = 1, trNo=11, T = 10000, IF_
GEN_RAND_NEURONS=1)                                                                                                                    
\/\/\/\/\/\/\/\/\/\/
fitting params ...
\/\/\/\/\/\/\/\/\/\/
printing pdf...
n sp neurons = ---------------------------------------------------------------------------
UnboundLocalError                         Traceback (most recent call last)
<ipython-input-237-694278b74d5c> in <module>()
----> 1 fg.GetSinglePeakNeurons(0, 0, .075, .075, 36, 'E', 1, './figs/twopop/p0g0_m75', IF_PLOT=1, IF_FIT = 1, trNo=11, T = 10000, IF_GE
N_RAND_NEURONS=1)                                                                                                                      

/homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py in GetSinglePeakNeurons(p, gamma, mExt, mExtOne, nPhis, neuronType, nN
eurons, fname, trNo, nChnks, T, NE, NI, K, nPop, IF_FIT, IF_PLOT, IF_VERBOSE, IF_GEN_RAND_NEURONS)                                     
    415     print '\/'*10
    416     print 'printing pdf...'
--> 417     print 'n sp neurons = ', len(singlePeakedIdxList)
    418     # singlePeakedIdx = range(25)
    419     if len(singlePeakedIdx) > 0:

UnboundLocalError: local variable 'singlePeakedIdxList' referenced before assignment

In [238]: reload(fg)
/homecentral/srao/Documents/code/mypybox
Out[238]: <module 'FitGaussian' from 'FitGaussian.py'>

In [239]: fg.GetSinglePeakNeurons(0, 0, .075, .075, 36, 'E', 1, './figs/twopop/p0g0_m75', IF_PLOT=1, IF_FIT = 1, trNo=11, T = 10000, IF_
GEN_RAND_NEURONS=1)                                                                                                                    
\/\/\/\/\/\/\/\/\/\/
fitting params ...
\/\/\/\/\/\/\/\/\/\/
printing pdf...
n sp neurons =  0

In [240]: fg.GetSinglePeakNeurons(0, 0, .075, .075, 36, 'E', 100, './figs/twopop/p0g0_m75', IF_PLOT=1, IF_FIT = 1, trNo=11, T = 10000, I
F_GEN_RAND_NEURONS=1)                                                                                                                  
\/\/\/\/\/\/\/\/\/\/
fitting params ...
^[OB^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
<ipython-input-240-e12550126276> in <module>()
----> 1 fg.GetSinglePeakNeurons(0, 0, .075, .075, 36, 'E', 100, './figs/twopop/p0g0_m75', IF_PLOT=1, IF_FIT = 1, trNo=11, T = 10000, IF_
GEN_RAND_NEURONS=1)                                                                                                                    

/homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py in GetSinglePeakNeurons(p, gamma, mExt, mExtOne, nPhis, neuronType, nN
eurons, fname, trNo, nChnks, T, NE, NI, K, nPop, IF_FIT, IF_PLOT, IF_VERBOSE, IF_GEN_RAND_NEURONS)                                     
    400         IS_SINGLE_PEAK = False
    401         if IF_FIT:
--> 402             fitParams, _, chiSquare, IS_SINGLE_PEAK, IS_RESPONSIVE = FitPeriodicGaussian(phis, yy, yysem, IF_PLOT_FIT = IF_PLOTM
IN_PEAK_RATE = 0.)                                                                                                                     
    403             fity = PeriodicGaussian(np.linspace(0, 180, nPhis, endpoint = False), *fitParams)
    404             fitMax = np.max(PeriodicGaussian(np.linspace(0, 180, 100, endpoint = 0), *fitParams))

/homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py in FitPeriodicGaussian(x, y, ySEM, p0, IF_PLOT_FIT, MIN_PEAK_RATE)
    159                     p0 = [x[np.argmax(y)], 50 + 20 * np.random.randn(), np.nanmax(y) + np.random.rand(), 1.0]
    160                     # print 'p0 = ', p0
--> 161                     fitParamsTmp, fitErrorTmp = curve_fit(PeriodicGaussian, x, y, p0 = p0, max_nfev = 4000, bounds = bnds)
    162 
    163                     # print '     ', fitParamsTmp

/usr/lib/python2.7/dist-packages/scipy/optimize/minpack.pyc in curve_fit(f, xdata, ydata, p0, sigma, absolute_sigma, check_finite, bound
s, method, **kwargs)                                                                                                                   
    656     else:
    657         res = least_squares(func, p0, args=args, bounds=bounds, method=method,
--> 658                             **kwargs)
    659 
    660         if not res.success:

/usr/lib/python2.7/dist-packages/scipy/optimize/_lsq/least_squares.pyc in least_squares(fun, x0, jac, bounds, method, ftol, xtol, gtol, 
x_scale, loss, f_scale, diff_step, tr_solver, tr_options, jac_sparsity, max_nfev, verbose, args, kwargs)                               
    876         result = trf(fun_wrapped, jac_wrapped, x0, f0, J0, lb, ub, ftol, xtol,
    877                      gtol, max_nfev, x_scale, loss_function, tr_solver,
--> 878                      tr_options.copy(), verbose)
    879 
    880     elif method == 'dogbox':

/usr/lib/python2.7/dist-packages/scipy/optimize/_lsq/trf.pyc in trf(fun, jac, x0, f0, J0, lb, ub, ftol, xtol, gtol, max_nfev, x_scale, l
oss_function, tr_solver, tr_options, verbose)                                                                                          
    124         return trf_bounds(
    125             fun, jac, x0, f0, J0, lb, ub, ftol, xtol, gtol, max_nfev, x_scale,
--> 126             loss_function, tr_solver, tr_options, verbose)
    127 
    128 

/usr/lib/python2.7/dist-packages/scipy/optimize/_lsq/trf.pyc in trf_bounds(fun, jac, x0, f0, J0, lb, ub, ftol, xtol, gtol, max_nfev, x_s
cale, loss_function, tr_solver, tr_options, verbose)                                                                                   
    295         g_h = d * g
    296 
--> 297         f_augmented[:m] = f
    298         if tr_solver == 'exact':
    299             J_augmented[:m] = J * d

KeyboardInterrupt: 

In [241]: fg.GetSinglePeakNeurons(0, 0, .075, .075, 36, 'E', 100, './figs/twopop/p0g0_m75', IF_PLOT=1, IF_FIT = 1, trNo=11, T = 10000, I
F_GEN_RAND_NEURONS=1, nChnks=10)                                                                                                    
\/\/\/\/\/\/\/\/\/\/
fitting params ...
\/\/\/\/\/\/\/\/\/\/
printing pdf...
n sp neurons =  35
nPasges =  2
neuron# 35 firparams =  [  6.08254341e+01   5.43282037e+01   3.64068896e-01   2.63532211e-03] qprob =  0.999999999985
neuron# 391 firparams =  [  6.19629868e+01   4.99132900e+01   3.69729221e-01   3.61023288e-03] qprob =  1.0
neuron# 592 firparams =  [  1.11282681e+02   5.45116827e+01   2.49114568e-01   1.02306429e-02] qprob =  0.999999999979
neuron# 885 firparams =  [  1.97023170e+01   7.10974080e+01   4.67606729e-01   5.82533675e-20] qprob =  0.999999999718
neuron# 993 firparams =  [  1.24367418e+02   8.14225199e+01   3.20559794e-01   2.18003450e-21] qprob =  1.0
neuron# 2619 firparams =  [  1.78619239e+02   7.70156395e+01   2.44826271e-01   3.87120527e-22] qprob =  1.0
neuron# 3408 firparams =  [  7.04675382e+01   6.54121420e+01   4.03064285e-01   3.12874392e-03] qprob =  0.999999998784
neuron# 3453 firparams =  [  6.36263453e+01   4.89961337e+01   2.53965873e-01   8.30437532e-03] qprob =  0.999999999701
neuron# 3671 firparams =  [  1.18088180e+02   5.94424327e+01   4.22563954e-01   1.33009808e-22] qprob =  0.999999999996
neuron# 3676 firparams =  [  1.74475867e+00   6.94078259e+01   5.77412220e-01   1.15006154e-17] qprob =  0.999999991901
neuron# 3777 firparams =  [  4.17587606e+01   4.99854206e+01   2.84424334e-01   2.18650671e-03] qprob =  1.0
neuron# 4132 firparams =  [  1.70176259e+02   6.03180276e+01   3.21149220e-01   1.19283687e-02] qprob =  0.999999999319
neuron# 4185 firparams =  [  1.54403181e+02   4.87190819e+01   2.19702904e-01   1.33301822e-03] qprob =  1.0
neuron# 4185 firparams =  [  1.54403181e+02   4.87190840e+01   2.19702909e-01   1.33301788e-03] qprob =  1.0
neuron# 4904 firparams =  [  1.44041951e+02   4.89310360e+01   3.54031062e-01   1.95684666e-03] qprob =  1.0
neuron# 4904 firparams =  [  1.44041952e+02   4.89310313e+01   3.54031045e-01   1.95684788e-03] qprob =  1.0
neuron# 5021 firparams =  [  1.17938588e+02   4.67342476e+01   3.01680228e-01   8.40261065e-03] qprob =  0.999999991733
neuron# 5024 firparams =  [  7.19136455e+01   5.61455762e+01   3.19309623e-01   4.60351986e-03] qprob =  0.999999999984
neuron# 5902 firparams =  [  8.87535454e+01   5.02555330e+01   1.57975680e-01   2.63688104e-02] qprob =  0.999999999997
neuron# 6379 firparams =  [  1.32668886e+02   5.11312329e+01   3.48166603e-01   3.33243775e-03] qprob =  0.99999999999
neuron# 7033 firparams =  [  1.56354918e+02   5.61269049e+01   3.43871570e-01   1.67998543e-03] qprob =  0.999999999998
neuron# 7121 firparams =  [  8.98472567e+01   5.34565939e+01   1.12180533e-01   1.75075000e-02] qprob =  0.999999997905
neuron# 7597 firparams =  [  1.63778116e+02   5.70617521e+01   2.51680403e-01   4.72690129e-03] qprob =  1.0
neuron# 7598 firparams =  [  3.06035384e+01   5.55851248e+01   2.62604083e-01   4.04486669e-03] qprob =  0.999999999995
neuron# 7710 firparams =  [  2.42435551e+01   6.27298527e+01   4.33342949e-01   1.53985400e-15] qprob =  0.999999999859
neuron# 7986 firparams =  [  1.38960619e+02   5.59028850e+01   3.43753260e-01   9.39760935e-03] qprob =  0.999999978843
neuron# 8187 firparams =  [  1.34539762e+02   8.16879885e+01   4.77246012e-01   7.11292609e-21] qprob =  0.999999999922
neuron# 8221 firparams =  [  6.32945945e+01   4.21008832e+01   3.00118563e-01   2.28432816e-03] qprob =  1.0
neuron# 8221 firparams =  [  6.32945946e+01   4.21008812e+01   3.00118560e-01   2.28432851e-03] qprob =  1.0
neuron# 8231 firparams =  [  3.68483473e+01   5.54854596e+01   2.35738196e-01   2.78624706e-03] qprob =  1.0
neuron# 8569 firparams =  [  1.51523796e+02   7.52453614e+01   3.67561129e-01   2.85542747e-20] qprob =  1.0
neuron# 8679 firparams =  [  9.99522479e+01   4.85991912e+01   3.21383489e-01   6.91606236e-03] qprob =  0.999999999999
neuron# 8732 firparams =  [  1.49646996e+02   4.43310548e+01   3.19789067e-01   2.36335581e-03] qprob =  1.0
neuron# 9418 firparams =  [  8.42796351e+01   4.67622953e+01   3.09308356e-01   7.61543334e-04] qprob =  0.999999999973
neuron# 9966 firparams =  [  8.14542917e+01   6.59898788e+01   4.16897198e-01   2.24293362e-15] qprob =  0.99999999987

In [242]: invalid command name "139983978517280idle_draw"
    while executing
"139983978517280idle_draw"
    ("afte

In [242]: 

In [242]: int(np.ceil(nNeurons / float(18)))                                                                                            
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-242-8ad3a793a1f1> in <module>()
----> 1 int(np.ceil(nNeurons / float(18)))

NameError: name 'nNeurons' is not defined

In [243]: int(np.ceil(35 / float(18)))                                                                                                  
Out[243]: 2

In [244]: 35.18
Out[244]: 35.18

In [245]: 35./18
Out[245]: 1.9444444444444444

In [246]: fg.GetSinglePeakNeurons(0, 0, .075, .075, 36, 'E', 1, './figs/twopop/p0g0_m75', IF_PLOT=1, IF_FIT = 1, trNo=11, T = 10000, IF_
GEN_RAND_NEURONS=1, nChnks=10)                                                                                                          
\/\/\/\/\/\/\/\/\/\/
fitting params ...
\/\/\/\/\/\/\/\/\/\/
printing pdf...
n sp neurons =  1
nPasges =  1
neuron# 7317 firparams =  [  1.55775862e+02   5.08709064e+01   1.54237675e-01   8.22610551e-03] qprob =  1.0

In [247]: fg.GetSinglePeakNeurons(0, 0, .075, .075, 36, 'E', 1, './figs/twopop/p0g0_m75', IF_PLOT=1, IF_FIT = 1, trNo=11, T = 10000, IF_
GEN_RAND_NEURONS=1, nChnks=10)                                                                                                         
\/\/\/\/\/\/\/\/\/\/
fitting params ...
\/\/\/\/\/\/\/\/\/\/
printing pdf...
n sp neurons =  0

In [248]: reload(fg)
/homecentral/srao/Documents/code/mypybox
Out[248]: <module 'FitGaussian' from 'FitGaussian.py'>

In [249]: fg.GetSinglePeakNeurons(0, 0, .075, .075, 36, 'E', 1, './figs/twopop/p0g0_m75', IF_PLOT=1, IF_FIT = 1, trNo=11, T = 10000, IF_GEN_RAND_NEURONS=1, nChnks=10)
\/\/\/\/\/\/\/\/\/\/
fitting params ...
\/\/\/\/\/\/\/\/\/\/
printing pdf...
n sp neurons =  0

In [250]: plt.close('all')

In [251]: fg.GetSinglePeakNeurons(0, 0, .075, .075, 36, 'E', 1, './figs/twopop/p0g0_m75', IF_PLOT=1, IF_FIT = 1, trNo=11, T = 10000, IF_GEN_RAND_NEURONS=1, nChnks=10)
\/\/\/\/\/\/\/\/\/\/
fitting params ...
\/\/\/\/\/\/\/\/\/\/
printing pdf...
n sp neurons =  0

In [252]: reload(fg)
/homecentral/srao/Documents/code/mypybox
Out[252]: <module 'FitGaussian' from 'FitGaussian.py'>

In [253]: fg.GetSinglePeakNeurons(0, 0, .075, .075, 36, 'E', 1, './figs/twopop/p0g0_m75', IF_PLOT=1, IF_FIT = 1, trNo=11, T = 10000, IF_GEN_RAND_NEURONS=1, nChnks=10)
\/\/\/\/\/\/\/\/\/\/
fitting params ...
\/\/\/\/\/\/\/\/\/\/
printing pdf...
n sp neurons =  0
nPasges =  1
neuron# 0 firparams =  [  1.66668807e+02   1.71880567e+00   1.31927155e-01   3.28323850e-03] qprob =  0.999999999999
neuron# 1 firparams =  [  9.36257144e+01   4.25312168e+01   6.57730635e-02   2.84253105e-04] qprob =  1.0
---------------------------------------------------------------------------
TclError                                  Traceback (most recent call last)
<ipython-input-253-40f6c76d6f94> in <module>()
----> 1 fg.GetSinglePeakNeurons(0, 0, .075, .075, 36, 'E', 1, './figs/twopop/p0g0_m75', IF_PLOT=1, IF_FIT = 1, trNo=11, T = 10000, IF_GEN_RAND_NEURONS=1, nChnks=10)

/homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py in GetSinglePeakNeurons(p, gamma, mExt, mExtOne, nPhis, neuronType, nNeurons, fname, trNo, nChnks, T, NE, NI, K, nPop, IF_FIT
, IF_PLOT, IF_VERBOSE, IF_GEN_RAND_NEURONS)                                                                                                                                                   
    451                             figure.add_plot(width=NoEscape(r'\linewidth'), dpi = 300) #*args, **kwargs)
    452                     plt.ion()
--> 453                     plt.waitforbuttonpress()
    454                     plt.clf()
    455 # ;        ipdb.set_trace()

/usr/lib/python2.7/dist-packages/matplotlib/pyplot.pyc in waitforbuttonpress(*args, **kwargs)
    715     If *timeout* is negative, does not timeout.
    716     """
--> 717     return gcf().waitforbuttonpress(*args, **kwargs)
    718 
    719 

/usr/lib/python2.7/dist-packages/matplotlib/figure.pyc in waitforbuttonpress(self, timeout)
   1683 
   1684         blocking_input = BlockingKeyMouseInput(self)
-> 1685         return blocking_input(timeout=timeout)
   1686 
   1687     def get_default_bbox_extra_artists(self):

/usr/lib/python2.7/dist-packages/matplotlib/blocking_input.pyc in __call__(self, timeout)
    374         """
    375         self.keyormouse = None
--> 376         BlockingInput.__call__(self, n=1, timeout=timeout)
    377 
    378         return self.keyormouse

/usr/lib/python2.7/dist-packages/matplotlib/blocking_input.pyc in __call__(self, n, timeout)
    115         try:
    116             # Start event loop
--> 117             self.fig.canvas.start_event_loop(timeout=timeout)
    118         finally:  # Run even on exception like ctrl-c
    119             # Disconnect the callbacks

/usr/lib/python2.7/dist-packages/matplotlib/backends/backend_tkagg.pyc in start_event_loop(self, timeout)
    515 
    516     def start_event_loop(self,timeout):
--> 517         FigureCanvasBase.start_event_loop_default(self,timeout)
    518     start_event_loop.__doc__=FigureCanvasBase.start_event_loop_default.__doc__
    519 

/usr/lib/python2.7/dist-packages/matplotlib/backend_bases.pyc in start_event_loop_default(self, timeout)
   2443         self._looping = True
   2444         while self._looping and counter * timestep < timeout:
-> 2445             self.flush_events()
   2446             time.sleep(timestep)
   2447             counter += 1

/usr/lib/python2.7/dist-packages/matplotlib/backends/backend_tkagg.pyc in flush_events(self)
    512 
    513     def flush_events(self):
--> 514         self._master.update()
    515 
    516     def start_event_loop(self,timeout):

/usr/lib/python2.7/lib-tk/Tkinter.pyc in update(self)
   1020     def update(self):
   1021         """Enter event loop until all pending events have been processed by Tcl."""
-> 1022         self.tk.call('update')
   1023     def update_idletasks(self):
   1024         """Enter event loop until all idle callbacks have been called. This

TclError: can't invoke "update" command: application has been destroyed

In [254]: reload(fg)
/homecentral/srao/Documents/code/mypybox
Out[254]: <module 'FitGaussian' from 'FitGaussian.py'>

In [255]: reload(fg)
/homecentral/srao/Documents/code/mypybox
Out[255]: <module 'FitGaussian' from 'FitGaussian.py'>

In [256]: fg.GetSinglePeakNeurons(0, 0, .075, .075, 36, 'E', 1, './figs/twopop/p0g0_m75', IF_PLOT=1, IF_FIT = 1, trNo=11, T = 10000, IF_GEN_RAND_NEURONS=1, nChnks=10)
\/\/\/\/\/\/\/\/\/\/
fitting params ...
\/\/\/\/\/\/\/\/\/\/
printing pdf...
n sp neurons =  0
nPasges =  1
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(432)GetSinglePeakNeurons()
    431         ipdb.set_trace()
--> 432         for kk in range(nPages):
    433             singlePeakedIdxList = singlePeakedIdx[kk * nFigsPerPage: (kk + 1) * nFigsPerPage]

ipdb> n
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(433)GetSinglePeakNeurons()
    432         for kk in range(nPages):
--> 433             singlePeakedIdxList = singlePeakedIdx[kk * nFigsPerPage: (kk + 1) * nFigsPerPage]
    434             with doc.create(Figure(position='htbp')) as plot:

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(434)GetSinglePeakNeurons()
    433             singlePeakedIdxList = singlePeakedIdx[kk * nFigsPerPage: (kk + 1) * nFigsPerPage]
--> 434             with doc.create(Figure(position='htbp')) as plot:
    435                 for i in singlePeakedIdxList:

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(435)GetSinglePeakNeurons()
    434             with doc.create(Figure(position='htbp')) as plot:
--> 435                 for i in singlePeakedIdxList:
    436                     plt.ion()

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(436)GetSinglePeakNeurons()
    435                 for i in singlePeakedIdxList:
--> 436                     plt.ion()
    437                     plt.waitforbuttonpress()

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(437)GetSinglePeakNeurons()
    436                     plt.ion()
--> 437                     plt.waitforbuttonpress()
    438 

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(439)GetSinglePeakNeurons()
    438 
--> 439                     yy = tc[i, :]
    440                     yysem = tcSem[i, :]

ipdb> n
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(440)GetSinglePeakNeurons()
    439                     yy = tc[i, :]
--> 440                     yysem = tcSem[i, :]
    441                     (_, caps, _) = plt.errorbar(phis, yy, fmt = 'ko-', markersize = 3, yerr = yysem, lw = 0.8, elinewidth=0.8)

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(441)GetSinglePeakNeurons()
    440                     yysem = tcSem[i, :]
--> 441                     (_, caps, _) = plt.errorbar(phis, yy, fmt = 'ko-', markersize = 3, yerr = yysem, lw = 0.8, elinewidth=0.8)
    442                     for cap in caps:

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(442)GetSinglePeakNeurons()
    441                     (_, caps, _) = plt.errorbar(phis, yy, fmt = 'ko-', markersize = 3, yerr = yysem, lw = 0.8, elinewidth=0.8)
--> 442                     for cap in caps:
    443                         cap.set_markeredgewidth(0.8)

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(443)GetSinglePeakNeurons()
    442                     for cap in caps:
--> 443                         cap.set_markeredgewidth(0.8)
    444                     IS_SINGLE_PEAK = False

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(442)GetSinglePeakNeurons()
    441                     (_, caps, _) = plt.errorbar(phis, yy, fmt = 'ko-', markersize = 3, yerr = yysem, lw = 0.8, elinewidth=0.8)
--> 442                     for cap in caps:
    443                         cap.set_markeredgewidth(0.8)

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(443)GetSinglePeakNeurons()
    442                     for cap in caps:
--> 443                         cap.set_markeredgewidth(0.8)
    444                     IS_SINGLE_PEAK = False

ipdb> plt.show()
ipdb> n
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(442)GetSinglePeakNeurons()
    441                     (_, caps, _) = plt.errorbar(phis, yy, fmt = 'ko-', markersize = 3, yerr = yysem, lw = 0.8, elinewidth=0.8)
--> 442                     for cap in caps:
    443                         cap.set_markeredgewidth(0.8)

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(444)GetSinglePeakNeurons()
    443                         cap.set_markeredgewidth(0.8)
--> 444                     IS_SINGLE_PEAK = False
    445                     if IF_FIT:

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(445)GetSinglePeakNeurons()
    444                     IS_SINGLE_PEAK = False
--> 445                     if IF_FIT:
    446                         fitParams, _, chiSquare, IS_SINGLE_PEAK, IS_RESPONSIVE = FitPeriodicGaussian(phis, yy, yysem, IF_PLOT_FI
T = IF_PLOT, MIN_PEAK_RATE = 0.)                                                                                                       

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(446)GetSinglePeakNeurons()
    445                     if IF_FIT:
--> 446                         fitParams, _, chiSquare, IS_SINGLE_PEAK, IS_RESPONSIVE = FitPeriodicGaussian(phis, yy, yysem, IF_PLOT_FI
T = IF_PLOT, MIN_PEAK_RATE = 0.)                                                                                                       
    447                     if IF_VERBOSE:

ipdb> s
--Call--
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(111)FitPeriodicGaussian()
    110 
--> 111 def FitPeriodicGaussian(x, y, ySEM, p0 = [90, 30, 0.1, 1], IF_PLOT_FIT = False, MIN_PEAK_RATE = 0.0):
    112     # x = np.concatenate((x, [np.pi]))

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(115)FitPeriodicGaussian()
    114     # ySEM = np.concatenate((ySEM, [ySEM[0]]))
--> 115     fitParams = np.empty((4, ))
    116     fitParams[:] = np.nan

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(116)FitPeriodicGaussian()
    115     fitParams = np.empty((4, ))
--> 116     fitParams[:] = np.nan
    117     fitError = np.nan

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(117)FitPeriodicGaussian()
    116     fitParams[:] = np.nan
--> 117     fitError = np.nan
    118     chiSquare = np.nan

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(118)FitPeriodicGaussian()
    117     fitError = np.nan
--> 118     chiSquare = np.nan
    119     IS_RESPONSIVE = False

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(119)FitPeriodicGaussian()
    118     chiSquare = np.nan
--> 119     IS_RESPONSIVE = False
    120     if(np.max(y) > MIN_PEAK_RATE):

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(120)FitPeriodicGaussian()
    119     IS_RESPONSIVE = False
--> 120     if(np.max(y) > MIN_PEAK_RATE):
    121         IS_RESPONSIVE = True

ipdb> 
--Call--
> /usr/lib/python2.7/dist-packages/numpy/core/fromnumeric.py(2180)amax()
   2179 
-> 2180 def amax(a, axis=None, out=None, keepdims=False):
   2181     """

ipdb> y
*** NameError: name 'y' is not defined
ipdb> up
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(120)FitPeriodicGaussian()
    119     IS_RESPONSIVE = False
--> 120     if(np.max(y) > MIN_PEAK_RATE):
    121         IS_RESPONSIVE = True

ipdb> y
array([ 0.065586 ,  0.0589857,  0.0603825,  0.0974306,  0.0484333,
        0.0869516,  0.0852194,  0.0572517,  0.0447416,  0.0445536,
        0.0668596,  0.0559231,  0.050573 ,  0.0389419,  0.075585 ,
        0.0642883,  0.0599393,  0.0595076,  0.0574069,  0.0465839,
        0.0772344,  0.0631817,  0.0501325,  0.0640166,  0.0836928,
        0.0767783,  0.0849375,  0.1023333,  0.0678739,  0.077612 ,
        0.0662976,  0.0645795,  0.0534099,  0.1170696,  0.068749 ,
        0.0753773])
ipdb> n
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(121)FitPeriodicGaussian()
    120     if(np.max(y) > MIN_PEAK_RATE):
--> 121         IS_RESPONSIVE = True
    122         nPhis = len(x)

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(122)FitPeriodicGaussian()
    121         IS_RESPONSIVE = True
--> 122         nPhis = len(x)
    123         nParams = 4

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(123)FitPeriodicGaussian()
    122         nPhis = len(x)
--> 123         nParams = 4
    124         degsOfFreedom = nPhis - nParams

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(124)FitPeriodicGaussian()
    123         nParams = 4
--> 124         degsOfFreedom = nPhis - nParams
    125         significanceVal = 0.05

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(125)FitPeriodicGaussian()
    124         degsOfFreedom = nPhis - nParams
--> 125         significanceVal = 0.05
    126         po = GetPhase(y, x * np.pi / 180.0, IF_IN_RANGE = True)

ipdb> degsOfFreedom
32
ipdb> n
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(126)FitPeriodicGaussian()
    125         significanceVal = 0.05
--> 126         po = GetPhase(y, x * np.pi / 180.0, IF_IN_RANGE = True)
    127         # p0[0] = x[np.argmax(y)]

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(135)FitPeriodicGaussian()
    134         # print 'y:', y
--> 135         try:
    136             theta = np.linspace(0, np.pi, 100)

ipdb> p0
[90, 30, 0.1, 1]
ipdb> po
1.5919206125076655
ipdb> n
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(136)FitPeriodicGaussian()
    135         try:
--> 136             theta = np.linspace(0, np.pi, 100)
    137             bnds = ((-np.inf, -np.inf, 0, 0), (np.inf, np.inf, np.inf, 1))

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(137)FitPeriodicGaussian()
    136             theta = np.linspace(0, np.pi, 100)
--> 137             bnds = ((-np.inf, -np.inf, 0, 0), (np.inf, np.inf, np.inf, 1))
    138             fitParams, fitError = curve_fit(PeriodicGaussian, x, y, p0 = p0, max_nfev = 4000, bounds = bnds)

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(138)FitPeriodicGaussian()
    137             bnds = ((-np.inf, -np.inf, 0, 0), (np.inf, np.inf, np.inf, 1))
--> 138             fitParams, fitError = curve_fit(PeriodicGaussian, x, y, p0 = p0, max_nfev = 4000, bounds = bnds)
    139             fitY = PeriodicGaussian(x, *fitParams)

ipdb> x
array([   0.,    5.,   10.,   15.,   20.,   25.,   30.,   35.,   40.,
         45.,   50.,   55.,   60.,   65.,   70.,   75.,   80.,   85.,
         90.,   95.,  100.,  105.,  110.,  115.,  120.,  125.,  130.,
        135.,  140.,  145.,  150.,  155.,  160.,  165.,  170.,  175.])
ipdb> n
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(139)FitPeriodicGaussian()
    138             fitParams, fitError = curve_fit(PeriodicGaussian, x, y, p0 = p0, max_nfev = 4000, bounds = bnds)
--> 139             fitY = PeriodicGaussian(x, *fitParams)
    140             vidx = ySEM > 0

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(140)FitPeriodicGaussian()
    139             fitY = PeriodicGaussian(x, *fitParams)
--> 140             vidx = ySEM > 0
    141             # print fitParams

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(145)FitPeriodicGaussian()
    144             # chiSquare = (((y[vidx] - fitY[vidx]) / ySEM[vidx])**2).sum()
--> 145             chiSquare = ((y[vidx] - fitY[vidx])**2 / ySEM[vidx]).sum()
    146             # chiSquare = ((y[vidx] - fitY[vidx])**2 / fitY[vidx]).sum()

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(149)FitPeriodicGaussian()
    148             # probability the chi^2 is exceedes the computed value just by chance
--> 149             qVal = GammaQ(degsOfFreedom, chiSquare)
    150             # print qVal

ipdb> chiSquare
2.593884574227459
ipdb> n
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(151)FitPeriodicGaussian()
    150             # print qVal
--> 151             if qVal < 1:
    152                 fitParamsList = []

ipdb> qVal
0.99999999999909395
ipdb> n
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(152)FitPeriodicGaussian()
    151             if qVal < 1:
--> 152                 fitParamsList = []
    153                 qvalList = []

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(153)FitPeriodicGaussian()
    152                 fitParamsList = []
--> 153                 qvalList = []
    154                 chi2List = []

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(154)FitPeriodicGaussian()
    153                 qvalList = []
--> 154                 chi2List = []
    155                 tmpErrorList = []

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(155)FitPeriodicGaussian()
    154                 chi2List = []
--> 155                 tmpErrorList = []
    156                 for kk in range(20):

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(156)FitPeriodicGaussian()
    155                 tmpErrorList = []
--> 156                 for kk in range(20):
    157                     # p0 = [x[np.argmax(y)], 100 + 50 * np.random.randn(), np.nanmax(y), np.random.rand()]

ipdb> b Fi
Figure                  FiniteKME1vsPv3.pyc     FitGaussian.py          FitGaussian.py~         FitPeriodicGaussianNEW
FiniteKME1vsPv3.py      FiniteKME1vsPv3.py~     FitGaussian.pyc         FitPeriodicGaussian     
ipdb> b Fit
FitGaussian.py          FitGaussian.pyc         FitGaussian.py~         FitPeriodicGaussian     FitPeriodicGaussianNEW
ipdb> b FitG
FitGaussian.py   FitGaussian.pyc  FitGaussian.py~  
ipdb> b FitGaussian:185
Breakpoint 1 at /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py:185
ipdb> c
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(185)FitPeriodicGaussian()
    184             # print 'chi = ', chiSquare
1-> 185             IS_GOOD_FIT = qVal > significanceVal
    186             fitParams[0] = AngleInRange(fitParams[0])

ipdb> plt.show()
ipdb> n
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(186)FitPeriodicGaussian()
1   185             IS_GOOD_FIT = qVal > significanceVal
--> 186             fitParams[0] = AngleInRange(fitParams[0])
    187             fitParams[1] = AngleInRange(fitParams[1])

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(187)FitPeriodicGaussian()
    186             fitParams[0] = AngleInRange(fitParams[0])
--> 187             fitParams[1] = AngleInRange(fitParams[1])
    188 

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(189)FitPeriodicGaussian()
    188 
--> 189             if IF_PLOT_FIT:
    190                 # print 'xx'*50

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(191)FitPeriodicGaussian()
    190                 # print 'xx'*50
--> 191                 plt.ion()
    192                 # plt.plot(theta * 180 / np.pi, PeriodicGaussian(theta * 180 / np.pi, *fitParams), 'r')

ipdb> fitPa
fitParams      fitParamsList  fitParamsTmp   
ipdb> fitParams
array([  1.66675989e+02,   1.71136573e+00,   1.34116250e-01,
         3.28323844e-03])
ipdb> n
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(193)FitPeriodicGaussian()
    192                 # plt.plot(theta * 180 / np.pi, PeriodicGaussian(theta * 180 / np.pi, *fitParams), 'r')
--> 193                 plt.plot(theta * 180 / np.pi, PeriodicGaussian(theta * 180 / np.pi, *fitParams))
    194                 plt.legend()

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(194)FitPeriodicGaussian()
    193                 plt.plot(theta * 180 / np.pi, PeriodicGaussian(theta * 180 / np.pi, *fitParams))
--> 194                 plt.legend()
    195                 plt.show()

ipdb> plt.show()
ipdb> n
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(195)FitPeriodicGaussian()
    194                 plt.legend()
--> 195                 plt.show()
    196         except RuntimeError, e:

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(203)FitPeriodicGaussian()
    202     # ipdb.set_trace()
--> 203     if(~np.any(np.isnan(fitParams))):
    204         return fitParams, fitError, chiSquare, IS_GOOD_FIT, IS_RESPONSIVE

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(204)FitPeriodicGaussian()
    203     if(~np.any(np.isnan(fitParams))):
--> 204         return fitParams, fitError, chiSquare, IS_GOOD_FIT, IS_RESPONSIVE
    205         print fitParams

ipdb> 
--Return--
(array([ ...844e-03]), array([[...91e-01]]), 2.5817717287384849, True, True)
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(204)FitPeriodicGaussian()
    203     if(~np.any(np.isnan(fitParams))):
--> 204         return fitParams, fitError, chiSquare, IS_GOOD_FIT, IS_RESPONSIVE
    205         print fitParams

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(447)GetSinglePeakNeurons()
    446                         fitParams, _, chiSquare, IS_SINGLE_PEAK, IS_RESPONSIVE = FitPeriodicGaussian(phis, yy, yysem, IF_PLOT_FI
T = IF_PLOT, MIN_PEAK_RATE = 0.)                                                                                                       
--> 447                     if IF_VERBOSE:
    448                         print 'neuron#', i, 'firparams = ', fitParams, 'qprob = ', GammaQ(nPhis - 4, chiSquare)

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(448)GetSinglePeakNeurons()
    447                     if IF_VERBOSE:
--> 448                         print 'neuron#', i, 'firparams = ', fitParams, 'qprob = ', GammaQ(nPhis - 4, chiSquare)
    449                     if(~np.any(np.isnan(fitParams))):

ipdb> 
neuron# 0 firparams =  [  1.66675989e+02   1.71136573e+00   1.34116250e-01   3.28323844e-03] qprob =  0.999999999999
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(449)GetSinglePeakNeurons()
    448                         print 'neuron#', i, 'firparams = ', fitParams, 'qprob = ', GammaQ(nPhis - 4, chiSquare)
--> 449                     if(~np.any(np.isnan(fitParams))):
    450                         plt.title(r'$\mathrm{neuron:} %s, \, \chi^2 = %.4s$'%(i, chiSquare))

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(450)GetSinglePeakNeurons()
    449                     if(~np.any(np.isnan(fitParams))):
--> 450                         plt.title(r'$\mathrm{neuron:} %s, \, \chi^2 = %.4s$'%(i, chiSquare))
    451                     else:

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(453)GetSinglePeakNeurons()
    452                         plt.title(r'$\mathrm{neuron:} %s$'%(i,))
--> 453                     with doc.create(SubFigure(position='b', width=NoEscape(width))) as figure:
    454                             figure.add_plot(width=NoEscape(r'\linewidth'), dpi = 300) #*args, **kwargs)

ipdb> n
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(454)GetSinglePeakNeurons()
    453                     with doc.create(SubFigure(position='b', width=NoEscape(width))) as figure:
--> 454                             figure.add_plot(width=NoEscape(r'\linewidth'), dpi = 300) #*args, **kwargs)
    455                     plt.ion()

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(455)GetSinglePeakNeurons()
    454                             figure.add_plot(width=NoEscape(r'\linewidth'), dpi = 300) #*args, **kwargs)
--> 455                     plt.ion()
    456                     plt.waitforbuttonpress()

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(456)GetSinglePeakNeurons()
    455                     plt.ion()
--> 456                     plt.waitforbuttonpress()
    457                     plt.clf()

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(457)GetSinglePeakNeurons()
    456                     plt.waitforbuttonpress()
--> 457                     plt.clf()
    458 # ;        ipdb.set_trace()

ipdb> n
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(435)GetSinglePeakNeurons()
    434             with doc.create(Figure(position='htbp')) as plot:
--> 435                 for i in singlePeakedIdxList:
    436                     plt.ion()

ipdb> 
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(436)GetSinglePeakNeurons()
    435                 for i in singlePeakedIdxList:
--> 436                     plt.ion()
    437                     plt.waitforbuttonpress()

ipdb> c
> /homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py(185)FitPeriodicGaussian()
    184             # print 'chi = ', chiSquare
1-> 185             IS_GOOD_FIT = qVal > significanceVal
    186             fitParams[0] = AngleInRange(fitParams[0])

ipdb> plt.show()
ipdb> c
neuron# 1 firparams =  [  9.36257144e+01   4.25312168e+01   6.57730635e-02   2.84253105e-04] qprob =  1.0

In [257]: reload(fg)
/homecentral/srao/Documents/code/mypybox
Out[257]: <module 'FitGaussian' from 'FitGaussian.py'>

In [258]: fg.GetSinglePeakNeurons(0, 0, .075, .075, 36, 'E', 100, './figs/twopop/p0g0_m75', IF_PLOT=1, IF_FIT = 1, trNo=11, T = 10000, I
F_GEN_RAND_NEURONS=1, nChnks=10)                                                                                                        
^C---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
<ipython-input-258-1e63cb925234> in <module>()
----> 1 fg.GetSinglePeakNeurons(0, 0, .075, .075, 36, 'E', 100, './figs/twopop/p0g0_m75', IF_PLOT=1, IF_FIT = 1, trNo=11, T = 10000, IF_
GEN_RAND_NEURONS=1, nChnks=10)                                                                                                         

/homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py in GetSinglePeakNeurons(p, gamma, mExt, mExtOne, nPhis, neuronType, nN
eurons, fname, trNo, nChnks, T, NE, NI, K, nPop, IF_FIT, IF_PLOT, IF_VERBOSE, IF_GEN_RAND_NEURONS)                                     
    383     for kChunk in range(nChnks):
    384         for i, iPhi in enumerate(phis):
--> 385             fr = LoadFrChnk(p, gamma, iPhi, mExt, mExtOne, kChunk, trNo, T, NE, K, nPop)
    386             tc[kChunk, :, i] = fr
    387     tcSem = np.squeeze(np.nanstd(tc, 0)) / np.sqrt(nChnks)

/homecentral/srao/Documents/code/binary/c/analysis/FitGaussian.py in LoadFrChnk(p, gamma, phi, mExt, mExtOne, chkId, trNo, T, N, K, nPop
, IF_VERBOSE)                                                                                                                          
     30         print baseFldr
     31     filename = 'meanrates_theta%.6f_tr%s_chnk%s.txt'%(phi, trNo, chkId)
---> 32     return np.loadtxt(baseFldr + filename)
     33 
     34 def LoadFr(p, gamma, phi, mExt, mExtOne, trNo = 0, T = 1000, N = 10000, K = 1000, nPop = 2, IF_VERBOSE = False):

/usr/lib/python2.7/dist-packages/numpy/lib/npyio.pyc in loadtxt(fname, dtype, comments, delimiter, converters, skiprows, usecols, unpack
, ndmin)                                                                                                                               
    928 
    929             # Convert each value according to its column and store
--> 930             items = [conv(val) for (conv, val) in zip(converters, vals)]
    931             # Then pack it according to the dtype's nesting
    932             items = pack_items(items, packing)

/usr/lib/python2.7/dist-packages/numpy/lib/npyio.pyc in floatconv(x)
    653     """ Find the correct dtype converter. Adapted from matplotlib """
    654 
--> 655     def floatconv(x):
    656         x.lower()
    657         if b'0x' in x:

/usr/lib/python2.7/bdb.pyc in trace_dispatch(self, frame, event, arg)
     49             return self.dispatch_line(frame)
     50         if event == 'call':
---> 51             return self.dispatch_call(frame, arg)
     52         if event == 'return':
     53             return self.dispatch_return(frame, arg)

/usr/lib/python2.7/bdb.pyc in dispatch_call(self, frame, arg)
     75             self.botframe = frame.f_back # (CT) Note that this may also be None!
     76             return self.trace_dispatch
---> 77         if not (self.stop_here(frame) or self.break_anywhere(frame)):
     78             # No need to trace this function
     79             return # None

/usr/lib/python2.7/bdb.pyc in stop_here(self, frame)
    121             if frame is self.botframe:
    122                 return True
--> 123             frame = frame.f_back
    124         return False
    125 

KeyboardInterrupt: 

In [259]: fg.GetSinglePeakNeurons(0, 0, .075, .075, 36, 'E', 200, './figs/twopop/p0g0_m75', IF_PLOT=1, IF_FIT = 1, trNo=11, T = 10000, I
F_GEN_RAND_NEURONS=1, nChnks=10)                                                                                                        
\/\/\/\/\/\/\/\/\/\/
fitting params ...
\/\/\/\/\/\/\/\/\/\/
printing pdf...
n sp neurons =  0
nPasges =  1
neuron# 0 firparams =  [  1.53618162e+02   9.07231514e+01   7.51986777e-02   2.15990416e-17] qprob =  0.999999999999
neuron# 1 firparams =  [  9.36257144e+01   4.25312168e+01   6.57730635e-02   2.84253105e-04] qprob =  1.0

In [260]: reload(fg)
/homecentral/srao/Documents/code/mypybox
Out[260]: <module 'FitGaussian' from 'FitGaussian.py'>

In [261]: fg.GetSinglePeakNeurons(0, 0, .075, .075, 36, 'E', 500, './figs/twopop/p0g0_m75', IF_PLOT=1, IF_FIT = 1, trNo=11, T = 10000, I
F_GEN_RAND_NEURONS=1, nChnks=10)                                                                                                        
\/\/\/\/\/\/\/\/\/\/
fitting params ...
\/\/\/\/\/\/\/\/\/\/
printing pdf...
n sp neurons =  160
nPasges =  9
neuron# 140 firparams =  [  1.33779869e+02   7.66587605e+01   4.25261630e-01   4.30375455e-19] qprob =  0.999999999996
neuron# 151 firparams =  [  6.41362422e+01   1.02583333e+02   3.74242832e-01   3.40611630e-12] qprob =  0.999999999984
neuron# 178 firparams =  [  1.44964421e+02   5.58172903e+01   1.90373519e-01   3.76442846e-03] qprob =  1.0
neuron# 219 firparams =  [  4.11881832e+01   4.19449419e+01   2.99772873e-01   1.22891367e-03] qprob =  1.0
neuron# 233 firparams =  [  6.32288068e+00   6.64358357e+01   5.37083239e-01   3.94719220e-22] qprob =  0.999999996937
neuron# 493 firparams =  [  1.70568213e+02   8.07927814e+01   4.88606236e-01   2.09313091e-19] qprob =  0.999999990926
neuron# 538 firparams =  [  6.70997462e+01   9.11569618e+01   3.85585526e-01   1.83779680e-19] qprob =  1.0
neuron# 685 firparams =  [  8.85027270e+01   7.21792508e+01   5.21450023e-01   1.40283876e-18] qprob =  0.999999999827
neuron# 703 firparams =  [  1.23453128e+02   6.49400490e+01   2.92019482e-01   9.09202209e-03] qprob =  0.999999999986
neuron# 906 firparams =  [  1.33046743e+02   5.85031448e+01   2.24343088e-01   1.71268004e-02] qprob =  0.999999999391
neuron# 976 firparams =  [  8.83097687e+01   6.00751377e+01   3.87949215e-01   4.63551842e-03] qprob =  0.999999999983
neuron# 993 firparams =  [  1.24367418e+02   8.14225199e+01   3.20559793e-01   1.56026943e-21] qprob =  1.0
neuron# 993 firparams =  [  1.24367418e+02   8.14225199e+01   3.20559793e-01   3.19291716e-22] qprob =  1.0
neuron# 1133 firparams =  [  3.12744528e+01   4.74192023e+01   2.77507474e-01   5.25528718e-03] qprob =  0.999999999978
neuron# 1231 firparams =  [  8.03889346e+01   4.48156818e+01   2.27440110e-01   4.22312158e-03] qprob =  1.0
neuron# 1231 firparams =  [  8.03889347e+01   4.48156842e+01   2.27440114e-01   4.22312123e-03] qprob =  1.0
neuron# 1315 firparams =  [  1.67763139e+02   5.47948864e+01   3.30825929e-01   5.50866243e-03] qprob =  0.999999999998
neuron# 1352 firparams =  [  4.66442428e+01   6.38467788e+01   3.92252164e-01   3.86798858e-03] qprob =  1.0
neuron# 1381 firparams =  [  1.30308569e+02   6.12465082e+01   3.26422675e-01   4.62790479e-03] qprob =  0.999999999999
neuron# 1381 firparams =  [  1.30308569e+02   6.12465389e+01   3.26422887e-01   4.62789346e-03] qprob =  0.999999999999
neuron# 1388 firparams =  [  1.79280692e+02   5.84870681e+01   3.42220630e-01   1.19963111e-02] qprob =  0.99999995232
neuron# 1400 firparams =  [  3.23731095e+01   8.90863641e+01   6.97056892e-01   3.27011337e-16] qprob =  0.999999994678
neuron# 1400 firparams =  [  3.23731095e+01   8.90863641e+01   6.97056892e-01   1.99743438e-21] qprob =  0.999999994678
neuron# 1721 firparams =  [  1.63578486e+02   7.05738487e+01   5.18903349e-01   7.35051269e-21] qprob =  0.999999999972
neuron# 1741 firparams =  [  2.64628563e+01   5.74452442e+01   2.02056895e-01   1.15505451e-02] qprob =  0.999999999951
neuron# 1803 firparams =  [  8.70979765e+01   6.71924343e+01   3.89636116e-01   9.74991041e-04] qprob =  0.999999999999
neuron# 1803 firparams =  [  8.70979765e+01   6.71924299e+01   3.89636072e-01   9.74993363e-04] qprob =  0.999999999999
neuron# 1807 firparams =  [  1.25739678e+02   7.91799727e+01   3.55151940e-01   1.45988025e-18] qprob =  1.0
neuron# 1810 firparams =  [  1.04836443e+02   6.47039650e+01   3.15004330e-01   9.88940916e-03] qprob =  0.999999998486
neuron# 1823 firparams =  [  1.25909649e+02   6.30113763e+01   3.75779896e-01   9.37403022e-03] qprob =  0.999999972833
neuron# 1855 firparams =  [  6.57596268e+01   8.01866569e+01   6.10961693e-01   4.09867994e-22] qprob =  0.999999999962
neuron# 1889 firparams =  [  1.45435034e+02   5.20812060e+01   3.87540245e-01   9.62991228e-04] qprob =  1.0
neuron# 1985 firparams =  [  6.22896060e+01   5.20114678e+01   2.99371463e-01   1.80809920e-03] qprob =  1.0
neuron# 1985 firparams =  [  6.22896077e+01   5.20114662e+01   2.99371456e-01   1.80809961e-03] qprob =  1.0
neuron# 2156 firparams =  [  2.39417512e+01   5.81839137e+01   2.53017337e-01   1.26921485e-02] qprob =  0.999999999609
neuron# 2291 firparams =  [  1.09824661e+02   7.89318034e+01   3.66976066e-01   1.40681585e-18] qprob =  0.999999999999
neuron# 2296 firparams =  [  9.82421870e+01   5.43199637e+01   2.85414900e-01   2.62147941e-03] qprob =  0.999999999998
neuron# 2306 firparams =  [  4.04643361e+01   5.18654916e+01   2.65173488e-01   1.06069860e-03] qprob =  1.0
neuron# 2432 firparams =  [  1.26881031e+02   4.53566246e+01   3.06884166e-01   3.40266384e-03] qprob =  0.999999999994
neuron# 2497 firparams =  [  1.45737588e+02   5.82863466e+01   3.13305322e-01   3.40347436e-03] qprob =  0.999999999992
neuron# 2570 firparams =  [  4.94090166e+01   5.14114587e+01   9.46029925e-02   8.38245514e-03] qprob =  1.0
neuron# 2570 firparams =  [  4.94090119e+01   5.14113683e+01   9.46028847e-02   8.38246207e-03] qprob =  1.0
neuron# 2619 firparams =  [  1.78619238e+02   7.70156388e+01   2.44826273e-01   8.05541387e-15] qprob =  1.0
neuron# 2690 firparams =  [  4.84326042e+01   5.97826911e+01   3.57604828e-01   2.75481482e-03] qprob =  0.999999999948
neuron# 2690 firparams =  [  4.84326044e+01   5.97826945e+01   3.57604853e-01   2.75481351e-03] qprob =  0.999999999948
neuron# 2743 firparams =  [  1.41228740e+02   4.74226408e+01   2.34433105e-01   1.11548905e-03] qprob =  1.0
neuron# 2811 firparams =  [  1.09130265e+02   6.38216278e+01   5.72952821e-01   2.71702860e-16] qprob =  0.999999999989
neuron# 2860 firparams =  [  3.14928861e+01   5.15944407e+01   2.56963549e-01   5.79493688e-03] qprob =  0.999999999999
neuron# 2927 firparams =  [  5.94055316e+01   8.32228600e+01   3.62007192e-01   1.18299285e-17] qprob =  1.0
neuron# 3064 firparams =  [  1.50126557e+02   5.86289905e+01   3.16746722e-01   3.66611698e-18] qprob =  1.0
neuron# 3238 firparams =  [  1.45421439e+02   4.95657208e+01   1.84837081e-01   9.49995684e-03] qprob =  0.999999999997
neuron# 3282 firparams =  [  7.90043533e+01   4.35591277e+01   2.50144660e-01   1.70072567e-03] qprob =  1.0
neuron# 3282 firparams =  [  7.90043502e+01   4.35591308e+01   2.50144664e-01   1.70072518e-03] qprob =  1.0
neuron# 3377 firparams =  [  1.23985859e+02   6.39972244e+01   2.43753624e-01   1.34172252e-02] qprob =  0.999999999969
neuron# 3430 firparams =  [  9.65213920e+01   5.33491117e+01   2.05086777e-01   3.41416115e-03] qprob =  1.0
neuron# 3444 firparams =  [  1.60489403e+02   9.51787106e+01   4.55472876e-01   3.25008984e-09] qprob =  0.999999962114
neuron# 3478 firparams =  [  4.43302486e+01   3.96679895e+01   1.36853805e-01   9.48857685e-04] qprob =  1.0
neuron# 3490 firparams =  [  5.63892272e+01   5.08583618e+01   2.80355818e-01   1.55199092e-03] qprob =  1.0
neuron# 3490 firparams =  [  5.63892272e+01   5.08583612e+01   2.80355817e-01   1.55199104e-03] qprob =  1.0
neuron# 3492 firparams =  [  8.78819997e+01   6.99010807e+01   4.57117643e-01   1.43135333e-20] qprob =  0.999999999965
neuron# 3526 firparams =  [  7.11787083e+01   7.03192034e+01   5.02563688e-01   4.37580414e-03] qprob =  0.999999999845
neuron# 3676 firparams =  [  1.74475797e+00   6.94078259e+01   5.77412218e-01   7.80262919e-11] qprob =  0.999999991901
neuron# 3677 firparams =  [  1.38137098e+02   7.31833681e+01   3.58268363e-01   2.02173530e-18] qprob =  0.999999999999
neuron# 3701 firparams =  [  4.32075702e+01   5.48468807e+01   1.76923271e-01   1.73275989e-02] qprob =  0.999999991554
neuron# 3701 firparams =  [  4.32075794e+01   5.48468067e+01   1.76923067e-01   1.73276109e-02] qprob =  0.999999991554
neuron# 3723 firparams =  [  8.46263308e+01   6.32857212e+01   5.89503219e-01   3.91326658e-11] qprob =  1.0
neuron# 3777 firparams =  [  4.17587603e+01   4.99854224e+01   2.84424341e-01   2.18650627e-03] qprob =  1.0
neuron# 3827 firparams =  [  1.35001614e+02   4.20650534e+01   2.01580477e-01   5.28244071e-03] qprob =  1.0
neuron# 3869 firparams =  [  1.12707812e+02   6.27765139e+01   3.62094012e-01   3.92533941e-03] qprob =  0.999999999819
neuron# 3869 firparams =  [  1.12707812e+02   6.27765108e+01   3.62093987e-01   3.92534075e-03] qprob =  0.999999999819
neuron# 3940 firparams =  [  8.56202476e+01   4.89020726e+01   3.05207315e-01   4.33349216e-03] qprob =  0.999999999995
neuron# 4031 firparams =  [  9.50887933e+01   5.33902789e+01   2.37362049e-01   1.93688863e-02] qprob =  0.999999999974
neuron# 4117 firparams =  [  9.07227024e+01   4.11099552e+01   9.88558050e-02   1.51646594e-02] qprob =  1.0
neuron# 4117 firparams =  [  9.07227064e+01   4.11099745e+01   9.88558127e-02   1.51646583e-02] qprob =  1.0
neuron# 4185 firparams =  [  1.54403182e+02   4.87190793e+01   2.19702898e-01   1.33301863e-03] qprob =  1.0
neuron# 4519 firparams =  [  3.64989792e+01   7.31678456e+01   3.82033884e-01   3.36993462e-16] qprob =  0.999999999866
neuron# 4530 firparams =  [  8.41922782e+01   7.23362644e+01   5.19490973e-01   1.45871964e-20] qprob =  0.999999999964
neuron# 4530 firparams =  [  8.41922782e+01   7.23362647e+01   5.19490971e-01   1.07289203e-18] qprob =  0.999999999964
neuron# 4588 firparams =  [  3.61109360e+01   6.62092380e+01   3.19702492e-01   7.70535027e-19] qprob =  1.0
neuron# 4589 firparams =  [  1.60518717e+02   6.16127468e+01   4.52463254e-01   3.45490218e-03] qprob =  0.999999992701
neuron# 4624 firparams =  [  8.10360579e+01   4.34847480e+01   2.42476135e-01   4.37207040e-03] qprob =  0.999999999996
neuron# 4635 firparams =  [  1.02297789e+02   5.52185275e+01   2.33168482e-01   5.82785592e-03] qprob =  0.999999999988
neuron# 4642 firparams =  [  1.04283937e+02   5.27822692e+01   3.20421729e-01   2.11181262e-03] qprob =  1.0
neuron# 4682 firparams =  [  1.83413436e+01   5.94504746e+01   4.00376968e-01   1.58438128e-03] qprob =  1.0
neuron# 4690 firparams =  [  4.50730067e-01   5.39925192e+01   3.52895263e-01   4.26911179e-03] qprob =  0.999999999991
neuron# 4715 firparams =  [  9.93415567e+01   6.95552667e+01   5.02876436e-01   4.23679157e-20] qprob =  0.999999999998
neuron# 4715 firparams =  [  9.93415569e+01   6.95552665e+01   5.02876437e-01   1.02474943e-17] qprob =  0.999999999998
neuron# 4715 firparams =  [  9.93415568e+01   6.95552667e+01   5.02876436e-01   1.32347111e-18] qprob =  0.999999999998
neuron# 5021 firparams =  [  1.17938597e+02   4.67342970e+01   3.01680357e-01   8.40260036e-03] qprob =  0.999999991733
neuron# 5021 firparams =  [  1.17938587e+02   4.67342429e+01   3.01680216e-01   8.40261162e-03] qprob =  0.999999991733
neuron# 5082 firparams =  [  1.73782118e+02   4.82897116e+01   2.65632087e-01   2.69016286e-03] qprob =  1.0
neuron# 5087 firparams =  [  2.47604404e+01   5.10987788e+01   3.74596279e-01   1.44894745e-03] qprob =  0.999999999999
neuron# 5113 firparams =  [  5.53268475e+01   5.47423749e+01   3.66474868e-01   2.01993150e-03] qprob =  0.999999999997
neuron# 5179 firparams =  [  4.63302474e+01   5.72451218e+01   3.44342086e-01   9.33989991e-03] qprob =  0.999999999995
neuron# 5265 firparams =  [  8.97504683e+01   5.71621700e+01   3.49301022e-01   7.49549405e-03] qprob =  0.99999999996
neuron# 5296 firparams =  [  1.62789083e+01   6.55899464e+01   5.18747549e-01   1.05770990e-21] qprob =  0.999999999811
neuron# 5436 firparams =  [  2.68989415e+01   5.43984743e+01   2.28209131e-01   1.52815752e-02] qprob =  0.999999979019
neuron# 5677 firparams =  [  3.81168823e+01   4.80021779e+01   3.13354949e-01   3.09223553e-03] qprob =  0.999999999797
neuron# 5764 firparams =  [  1.30639499e+02   5.81693238e+01   3.54348929e-01   1.06610780e-03] qprob =  0.999999999978
neuron# 5801 firparams =  [  8.22614238e+01   5.44811872e+01   1.64170610e-01   6.47874848e-03] qprob =  1.0
neuron# 6184 firparams =  [  1.74556389e+02   5.28567686e+01   3.81144810e-01   7.58742349e-03] qprob =  0.999999999984
neuron# 6220 firparams =  [  1.78891464e+02   6.05840493e+01   2.54510231e-01   1.01273318e-02] qprob =  0.999999914653
neuron# 6301 firparams =  [  1.66784605e+02   4.68089766e+01   2.63764959e-01   7.17471830e-03] qprob =  0.999999999961
neuron# 6313 firparams =  [  1.36646951e+02   8.58537445e+01   4.76916376e-01   4.40308240e-20] qprob =  0.999999999612
neuron# 6371 firparams =  [  1.68442846e+01   5.00266659e+01   2.79220171e-01   6.11130682e-03] qprob =  1.0
neuron# 6388 firparams =  [  9.77092689e+01   5.64310586e+01   3.54767187e-01   8.09610585e-03] qprob =  0.99999999993
neuron# 6429 firparams =  [  5.14487595e+01   7.88483042e+01   4.28445716e-01   2.05926613e-20] qprob =  0.999999999587
neuron# 6493 firparams =  [  1.13795179e+02   6.30930847e+01   3.02669615e-01   7.27212552e-19] qprob =  1.0
neuron# 6556 firparams =  [  3.73701137e+01   4.65840169e+01   1.48424247e-01   2.03939787e-02] qprob =  0.999999910129
neuron# 6639 firparams =  [  7.24334972e+01   7.97859245e+01   5.69217371e-01   1.59460048e-15] qprob =  0.999999999905
neuron# 6639 firparams =  [  7.24334972e+01   7.97859245e+01   5.69217371e-01   1.87811358e-21] qprob =  0.999999999905
neuron# 6639 firparams =  [  7.24334972e+01   7.97859245e+01   5.69217372e-01   7.41799030e-20] qprob =  0.999999999905
neuron# 6828 firparams =  [  1.25201216e+02   4.69461855e+01   3.23974401e-01   1.78909441e-03] qprob =  0.999999998437
neuron# 6902 firparams =  [  1.78806612e+02   4.81382327e+01   4.88027316e-01   1.75871983e-03] qprob =  1.0
neuron# 6992 firparams =  [  1.44718426e+02   8.04361914e+01   5.96531294e-01   1.07072575e-17] qprob =  0.999999956799
neuron# 7149 firparams =  [  1.76401055e+02   5.73991462e+01   3.78052247e-01   3.13959499e-03] qprob =  0.999999999907
neuron# 7149 firparams =  [  1.76401056e+02   5.73991437e+01   3.78052230e-01   3.13959590e-03] qprob =  0.999999999907
neuron# 7405 firparams =  [  1.11137507e+02   5.83043377e+01   1.04617861e-01   1.20921215e-02] qprob =  0.999999999898
neuron# 7448 firparams =  [  1.98432288e+01   4.42164677e+01   1.84352838e-01   3.28777727e-03] qprob =  1.0
neuron# 7507 firparams =  [  1.58220417e+02   5.23015426e+01   2.32412633e-01   1.41759030e-02] qprob =  0.999999998883
neuron# 7507 firparams =  [  1.58220412e+02   5.23014364e+01   2.32412302e-01   1.41759236e-02] qprob =  0.999999998883
neuron# 7517 firparams =  [  1.77443293e+02   4.82526037e+01   3.40905745e-01   1.46935532e-03] qprob =  0.999999999999
neuron# 7598 firparams =  [  3.06035427e+01   5.55851667e+01   2.62604261e-01   4.04485640e-03] qprob =  0.999999999995
neuron# 7658 firparams =  [  5.62237913e+01   5.92458345e+01   3.04978991e-01   4.38055928e-03] qprob =  1.0
neuron# 7701 firparams =  [  1.46066666e+02   8.73689093e+01   5.60521292e-01   1.35408213e-15] qprob =  0.999999997656
neuron# 7710 firparams =  [  2.42435556e+01   6.27298535e+01   4.33342945e-01   1.65885440e-19] qprob =  0.999999999859
neuron# 7716 firparams =  [  4.04284417e+00   5.43120296e+01   3.29319915e-01   2.36972944e-03] qprob =  0.999999999999
neuron# 7734 firparams =  [  2.21296050e+01   4.94185477e+01   3.78098895e-01   2.22742241e-03] qprob =  0.999999999847
neuron# 7734 firparams =  [  2.21296049e+01   4.94185473e+01   3.78098893e-01   2.22742252e-03] qprob =  0.999999999847
neuron# 7734 firparams =  [  2.21296039e+01   4.94185558e+01   3.78098928e-01   2.22742007e-03] qprob =  0.999999999847
neuron# 7776 firparams =  [  1.51480445e+02   5.35229731e+01   2.87124698e-01   8.59983231e-03] qprob =  0.999999998846
neuron# 7810 firparams =  [  3.05533033e+00   5.60532719e+01   3.12766439e-01   7.33714180e-04] qprob =  1.0
neuron# 7821 firparams =  [  1.61422324e+02   5.13013354e+01   3.36284653e-01   3.20502233e-03] qprob =  0.999999999999
neuron# 7828 firparams =  [  7.57592286e+01   4.54873409e+01   1.81912650e-01   1.66261802e-02] qprob =  0.999999999908
neuron# 7878 firparams =  [  1.15693310e+00   3.79570463e+01   1.10957101e-01   1.15060804e-02] qprob =  1.0
neuron# 7935 firparams =  [  1.06405922e+01   5.41914247e+01   2.37352861e-01   3.60919711e-03] qprob =  1.0
neuron# 7986 firparams =  [  1.38960619e+02   5.59028799e+01   3.43753232e-01   9.39761099e-03] qprob =  0.999999978843
neuron# 8054 firparams =  [  9.63786406e+01   4.58380367e+01   3.38291862e-01   8.21921638e-03] qprob =  0.999999999214
neuron# 8088 firparams =  [  9.37625566e+01   4.68488689e+01   2.06420430e-01   3.21477007e-03] qprob =  1.0
neuron# 8143 firparams =  [  2.63500135e+01   5.94913712e+01   2.76812804e-01   1.09553094e-03] qprob =  1.0
neuron# 8480 firparams =  [  3.50673605e+01   4.83567367e+01   1.23109476e-01   1.41953751e-02] qprob =  0.999999999984
neuron# 8610 firparams =  [  8.89037163e+00   7.19268196e+01   4.99687042e-01   2.07423810e-20] qprob =  0.999999999123
neuron# 8730 firparams =  [  1.18808559e+02   4.74509685e+01   2.21548569e-01   5.00318284e-03] qprob =  0.999999999998
neuron# 8731 firparams =  [  1.40412697e+02   9.21615654e+01   3.82298286e-01   2.97348478e-13] qprob =  1.0
neuron# 8913 firparams =  [  8.06840117e+01   4.80491672e+01   4.54200458e-01   1.69566712e-03] qprob =  0.99999999991
neuron# 9193 firparams =  [  1.52511352e+02   6.81350119e+01   4.87229169e-01   3.38571909e-03] qprob =  0.999999999945
neuron# 9225 firparams =  [  8.85944827e+01   5.27482206e+01   2.18125138e-01   5.79035911e-03] qprob =  1.0
neuron# 9251 firparams =  [  6.73140892e+01   6.96599948e+01   3.37584672e-01   7.24196626e-22] qprob =  0.999999999937
neuron# 9251 firparams =  [  6.73140893e+01   6.96599948e+01   3.37584673e-01   6.23611464e-21] qprob =  0.999999999937
neuron# 9251 firparams =  [  6.73140893e+01   6.96599948e+01   3.37584673e-01   4.27611018e-21] qprob =  0.999999999937
neuron# 9564 firparams =  [  7.50321226e+01   4.79290693e+01   2.94881399e-01   2.04857519e-03] qprob =  0.999999999998
neuron# 9589 firparams =  [  2.59988583e+01   4.36826312e+01   3.13864189e-01   5.32291529e-03] qprob =  0.999999999862
neuron# 9615 firparams =  [  1.16827525e+02   4.52905192e+01   3.53457999e-01   1.91347654e-03] qprob =  1.0
neuron# 9672 firparams =  [  1.11345378e+01   5.32558131e+01   2.05563064e-01   8.86048845e-03] qprob =  0.999999999967
neuron# 9690 firparams =  [  7.27620260e+01   7.57039240e+01   6.46641782e-01   1.32115309e-16] qprob =  0.999999974936
neuron# 9784 firparams =  [  1.56812494e+02   4.68009682e+01   3.46694819e-01   6.86305986e-03] qprob =  0.999999999409
neuron# 9836 firparams =  [  9.54782453e+01   6.03940105e+01   3.71498404e-01   7.72235215e-03] qprob =  0.999999999627
neuron# 9836 firparams =  [  9.54782460e+01   6.03940022e+01   3.71498341e-01   7.72235553e-03] qprob =  0.999999999627
neuron# 9845 firparams =  [  1.05952706e+02   4.83949914e+01   3.49607081e-01   4.25499032e-03] qprob =  0.999999999995
neuron# 9866 firparams =  [  4.84666274e+00   5.12004958e+01   2.32198762e-01   6.43675556e-03] qprob =  0.999999999998

In [262]: fg.GetSinglePeakNeurons(7, 0, .075, .075, 36, 'E', 1000, './figs/twopop/p7g0_m75', IF_PLOT=1, IF_FIT = 1, trNo=11, T = 10000, 
IF_GEN_RAND_NEURONS=1, nChnks=10)                                                                                                       
\/\/\/\/\/\/\/\/\/\/
fitting params ...
^[OB^[OB^[OB^[OB^[OB^[OB^[OB^[OB